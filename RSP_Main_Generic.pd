#N canvas 13 73 1265 627 10;
#N canvas 213 127 864 628 My_RSP_Metronome 0;
#X obj 223 28 inlet startMetronome;
#X obj 592 510 outlet FirstBeat;
#X obj 223 265 metro;
#X msg 242 125 60000;
#X floatatom 305 137 5 0 0 0 - - -;
#X obj 242 160 /;
#X obj 223 94 t b b b;
#X obj 223 65 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 272 189 15 0 0 0 - - -;
#X obj 386 250 i;
#X floatatom 463 267 5 0 0 0 - - -;
#X text 416 248 cut the nachkommastellen;
#X msg 182 93 0;
#X text 141 90 stop;
#X msg 305 108 122;
#X text 331 107 init bpm;
#X obj 223 346 i;
#X obj 258 345 + 1;
#X text 269 319 reset the counter;
#X msg 238 319 1;
#X obj 448 511 wiringPi_gpio 25 0 0;
#X obj 448 409 == 1;
#X floatatom 448 492 5 0 0 0 - - -;
#X obj 553 467 moses 1;
#X obj 592 491 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 305 78 r initBang;
#X text 449 43 This patch acts as a metronome \; whos bpm is set by
an initBang \; of the parent patch. \; The metronome counts til 4 and
\; everytime the "1" is reached \, \; a bang is sent to the output.
;
#X obj 293 295 s metroHits;
#X obj 244 217 / 4;
#X text 277 218 16tel genauigkeit;
#X obj 223 513 moses 16;
#X floatatom 281 246 10 0 0 0 - - -;
#X text 178 539 16tel genauigkeit;
#X floatatom 146 386 5 0 0 0 - - -;
#X obj 212 939 wiringPi_gpio 25 0 0;
#X floatatom 212 915 5 0 0 0 - - -;
#X obj 365 923 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 124 917 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 223 386 t f f f, f 38;
#X obj 335 462 % 4;
#X obj 335 437 t f f;
#X obj 335 482 == 1;
#X obj 335 511 s metroWholeBeats;
#X obj 448 441 t f f, f 18;
#X connect 0 0 7 0;
#X connect 2 0 16 0;
#X connect 2 0 27 0;
#X connect 3 0 5 0;
#X connect 4 0 5 1;
#X connect 5 0 8 0;
#X connect 5 0 28 0;
#X connect 6 0 2 0;
#X connect 6 1 3 0;
#X connect 6 2 4 0;
#X connect 7 0 6 0;
#X connect 9 0 10 0;
#X connect 12 0 2 0;
#X connect 14 0 4 0;
#X connect 16 0 17 0;
#X connect 16 0 33 0;
#X connect 16 0 38 0;
#X connect 17 0 16 1;
#X connect 19 0 16 1;
#X connect 21 0 43 0;
#X connect 22 0 20 0;
#X connect 23 1 24 0;
#X connect 24 0 1 0;
#X connect 25 0 14 0;
#X connect 28 0 2 1;
#X connect 28 0 31 0;
#X connect 30 1 19 0;
#X connect 35 0 34 0;
#X connect 38 0 30 0;
#X connect 38 1 40 0;
#X connect 38 2 21 0;
#X connect 39 0 41 0;
#X connect 40 0 39 0;
#X connect 41 0 42 0;
#X connect 43 0 22 0;
#X connect 43 1 23 0;
#X restore 450 28 pd My_RSP_Metronome;
#X obj 450 2 r startMetroBang;
#N canvas 27 92 1199 623 My_HID_CONTROLLER 0;
#X obj 316 182 tgl 20 0 empty empty empty 0 -6 0 8 -24198 -1 -1 100
100;
#X floatatom 883 317 5 0 0 1 value - -;
#X symbolatom 749 342 15 0 0 1 event_code - -;
#X symbolatom 662 359 15 0 0 1 event_type - -;
#X msg 603 119 close;
#X msg 574 179 refresh;
#X text 636 178 refresh device list;
#X text 757 70 released under the GNU GPL;
#X text 963 57 $Revision: 1.6 $$Date: 2007-07-26 07:31:38 $;
#X text 964 70 $Author: eighthave $;
#X text 19 102 Any non-zero value starts polling \,;
#X text 18 115 0 stops the polling. If the number;
#X text 19 128 is greater than 1 \, then the poll;
#X text 19 141 delay is set to that number.;
#X msg 574 156 info;
#X text 540 56 (C) Copyright 2004 Hans-Christoph Steiner <hans@at.or.at>
;
#X obj 316 254 hidio;
#X obj 662 297 unpack symbol symbol float float;
#X floatatom 801 318 2 0 0 1 instance - -;
#N canvas 62 79 454 304 remove 0;
#X obj 134 12 inlet;
#X obj 109 60 unpack symbol symbol float float;
#X obj 110 107 pack symbol symbol float;
#X obj 110 135 list trim;
#X obj 116 196 outlet;
#X obj 218 35;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 1 3 2 2;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X restore 41 323 pd remove instance numbers;
#X text 637 202 print a list of devices to the Pd window;
#X msg 574 202 devices;
#X msg 574 223 elements;
#X text 637 224 print a list of elements for the current device;
#X text 645 119 close the current device;
#X text 636 155 output device info to the right status outlet;
#X msg 343 158 open 0;
#X obj 574 103 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 354 135 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 316 205 5 0 0 0 - - -;
#X obj 40 1021 outlet dk1;
#X obj 69 1059 outlet dk2;
#X obj 84 1077 outlet dk2;
#X obj 111 1115 outlet dk3;
#X obj 98 1096 outlet dk3;
#X obj 126 1134 outlet dk4;
#X obj 141 1153 outlet dk4;
#X obj 159 1172 outlet dk5;
#X obj 177 1190 outlet dk5;
#X obj 208 1230 outlet dk6;
#X obj 193 1209 outlet dk6;
#X obj 229 1272 outlet dk7;
#X obj 219 1251 outlet dk7;
#X obj 243 1293 outlet dk8;
#X obj 256 1313 outlet dk8;
#X obj 62 742 s pk1;
#X obj 136 776 s pk2;
#X obj 245 821 s pk3;
#X obj 386 828 s pk4;
#X obj 536 836 s pk5;
#X obj 822 837 s pk7;
#X obj 833 785 s pk8;
#X floatatom 724 487 5 0 0 0 - - -;
#X floatatom 908 484 5 0 0 0 - - -;
#X floatatom 985 485 5 0 0 0 - - -;
#X floatatom 1074 485 5 0 0 0 - - -;
#X obj 474 504 clip 0 4086;
#X obj 474 528 / 4086;
#X obj 474 550 s subVol1;
#X obj 564 507 clip 0 4086;
#X obj 564 528 / 4086;
#X obj 564 550 s subVol2;
#X obj 644 507 clip 0 4086;
#X obj 644 528 / 4086;
#X floatatom 474 479 5 0 0 0 - - -;
#X floatatom 564 483 5 0 0 0 - - -;
#X floatatom 644 483 5 0 0 0 - - -;
#X obj 644 550 s subVol3;
#X obj 724 507 clip 0 4086;
#X obj 724 528 / 4086;
#X obj 824 528 / 4086;
#X floatatom 824 483 5 0 0 0 - - -;
#X obj 724 550 s subVol4;
#X obj 824 550 s subVol5;
#X obj 908 507 clip 0 4086;
#X obj 908 528 / 4086;
#X obj 908 550 s subVol6;
#X obj 985 507 clip 0 4086;
#X obj 985 528 / 4086;
#X obj 985 550 s subVol7;
#X obj 1074 505 clip 0 4086;
#X obj 1074 526 / 4086;
#X obj 1074 548 s subVol8;
#X obj 862 731 s extraPush;
#X floatatom 197 207 5 0 0 0 - - -;
#X msg 96 226 debug 6;
#X obj 41 887 route button_0 button_1 button_2 button_3 button_4 button_5
button_6 button_7 button_8 button_9 button_10 button_11 button_12 button_13
button_14 button_15;
#X text 435 44 comment;
#X obj 396 617 route syn_200 syn_201 syn_202 syn_203 syn_204 syn_205
syn_206 syn_207 syn_199;
#X obj 672 835 s pk6;
#X obj 41 358 route button key absolute syn;
#X obj 668 443 route rudder throttle rz ry rx z y x;
#X text 665 269 for debugging;
#X text 691 417 SCHIEBEREGLER;
#X text 471 597 PLAYKNOEPFE;
#X text 132 860 DREHKNOEPFE;
#X obj 59 1040 outlet dk1;
#N canvas 87 234 655 350 MY_RSP_HID_PRECISER 0;
#X obj 95 127 f 0;
#X obj 56 235 spigot;
#X obj 56 89 t f f b;
#X obj 75 170 !=;
#X text 122 127 old value;
#X text 103 169 compare old vs new value;
#X text 101 217 if comparism is true \; spigot receives a 1 \; and
opens up;
#X obj 56 37 inlet hidKnobTurn;
#X obj 56 301 outlet filteredKnobTurn;
#X text 290 38 18th October 2018 I found that the hid-object \; is
a little bit unprecise in reading the turns of my self-built HID-controller's
endless knobs. \; When I turn a knob \, the value detection \; sometimes
works ok: press: 1----0 But sometimes ONE turn is recognized as \;
TWO turns: \; press: 1-1-0-0 So this patch acts as a filter \; and
only lets a number come through \; when the number before was not the
same \; as the current number. \; The Moses object at the bottom lets
only the value 1 \; pass to the output.;
#X obj 56 269 moses 1;
#X connect 0 0 3 1;
#X connect 1 0 0 1;
#X connect 1 0 10 0;
#X connect 2 0 1 0;
#X connect 2 1 3 0;
#X connect 2 2 0 0;
#X connect 3 0 1 1;
#X connect 7 0 2 0;
#X connect 10 0 8 0;
#X restore 1080 1368 pd MY_RSP_HID_PRECISER;
#X obj 824 505 clip 0 4086;
#X obj 316 69 r hidInitBang;
#X obj 316 95 t b b;
#X obj 62 704 MY_RSP_HID_PRECISER;
#X obj 136 746 MY_RSP_HID_PRECISER;
#X obj 245 787 MY_RSP_HID_PRECISER;
#X obj 386 797 MY_RSP_HID_PRECISER;
#X obj 536 807 MY_RSP_HID_PRECISER;
#X obj 672 807 MY_RSP_HID_PRECISER;
#X obj 862 701 MY_RSP_HID_PRECISER;
#X obj 833 757 MY_RSP_HID_PRECISER;
#X obj 822 807 MY_RSP_HID_PRECISER;
#X obj 514 956 MY_RSP_HID_PRECISER;
#X obj 533 976 MY_RSP_HID_PRECISER;
#X obj 556 995 MY_RSP_HID_PRECISER;
#X obj 584 1014 MY_RSP_HID_PRECISER;
#X obj 605 1033 MY_RSP_HID_PRECISER;
#X obj 625 1051 MY_RSP_HID_PRECISER;
#X obj 648 1069 MY_RSP_HID_PRECISER;
#X obj 670 1088 MY_RSP_HID_PRECISER;
#X obj 690 1106 MY_RSP_HID_PRECISER;
#X obj 710 1125 MY_RSP_HID_PRECISER;
#X obj 731 1144 MY_RSP_HID_PRECISER;
#X obj 749 1164 MY_RSP_HID_PRECISER;
#X obj 769 1183 MY_RSP_HID_PRECISER;
#X obj 789 1202 MY_RSP_HID_PRECISER;
#X obj 806 1220 MY_RSP_HID_PRECISER;
#X obj 824 1238 MY_RSP_HID_PRECISER;
#X connect 0 0 29 0;
#X connect 4 0 16 0;
#X connect 5 0 16 0;
#X connect 14 0 16 0;
#X connect 16 0 17 0;
#X connect 16 0 19 0;
#X connect 17 0 3 0;
#X connect 17 1 2 0;
#X connect 17 2 18 0;
#X connect 17 3 1 0;
#X connect 19 0 90 0;
#X connect 21 0 16 0;
#X connect 22 0 16 0;
#X connect 26 0 16 0;
#X connect 27 0 14 0;
#X connect 28 0 26 0;
#X connect 29 0 16 0;
#X connect 52 0 68 0;
#X connect 53 0 74 0;
#X connect 54 0 77 0;
#X connect 55 0 80 0;
#X connect 56 0 57 0;
#X connect 57 0 58 0;
#X connect 59 0 60 0;
#X connect 60 0 61 0;
#X connect 62 0 63 0;
#X connect 63 0 67 0;
#X connect 64 0 56 0;
#X connect 65 0 59 0;
#X connect 66 0 62 0;
#X connect 68 0 69 0;
#X connect 69 0 72 0;
#X connect 70 0 73 0;
#X connect 71 0 98 0;
#X connect 74 0 75 0;
#X connect 75 0 76 0;
#X connect 77 0 78 0;
#X connect 78 0 79 0;
#X connect 80 0 81 0;
#X connect 81 0 82 0;
#X connect 84 0 16 0;
#X connect 85 0 16 0;
#X connect 86 0 110 0;
#X connect 86 1 111 0;
#X connect 86 2 112 0;
#X connect 86 3 113 0;
#X connect 86 4 114 0;
#X connect 86 5 115 0;
#X connect 86 6 116 0;
#X connect 86 7 117 0;
#X connect 86 8 118 0;
#X connect 86 9 119 0;
#X connect 86 10 120 0;
#X connect 86 11 121 0;
#X connect 86 12 122 0;
#X connect 86 13 123 0;
#X connect 86 14 124 0;
#X connect 86 15 125 0;
#X connect 88 0 101 0;
#X connect 88 1 102 0;
#X connect 88 2 103 0;
#X connect 88 3 104 0;
#X connect 88 4 105 0;
#X connect 88 5 106 0;
#X connect 88 6 109 0;
#X connect 88 7 108 0;
#X connect 88 8 107 0;
#X connect 90 0 86 0;
#X connect 90 1 88 0;
#X connect 90 2 91 0;
#X connect 91 0 64 0;
#X connect 91 1 65 0;
#X connect 91 2 66 0;
#X connect 91 3 52 0;
#X connect 91 4 71 0;
#X connect 91 5 53 0;
#X connect 91 6 54 0;
#X connect 91 7 55 0;
#X connect 98 0 70 0;
#X connect 99 0 100 0;
#X connect 100 0 0 0;
#X connect 100 1 26 0;
#X connect 101 0 45 0;
#X connect 102 0 46 0;
#X connect 103 0 47 0;
#X connect 104 0 48 0;
#X connect 105 0 49 0;
#X connect 106 0 89 0;
#X connect 107 0 83 0;
#X connect 108 0 51 0;
#X connect 109 0 50 0;
#X connect 110 0 30 0;
#X connect 111 0 96 0;
#X connect 112 0 31 0;
#X connect 113 0 32 0;
#X connect 114 0 34 0;
#X connect 115 0 33 0;
#X connect 116 0 35 0;
#X connect 117 0 36 0;
#X connect 118 0 37 0;
#X connect 119 0 38 0;
#X connect 120 0 40 0;
#X connect 121 0 39 0;
#X connect 122 0 42 0;
#X connect 123 0 41 0;
#X connect 124 0 43 0;
#X connect 125 0 44 0;
#X coords 0 623 400 622 400 30 0;
#X restore 26 38 pd My_HID_CONTROLLER;
#X obj 114 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 154 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 204 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 244 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 294 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 334 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 384 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 424 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 474 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 514 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 568 214 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 608 214 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 658 214 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 698 214 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407
-1 -1;
#X obj 24 290 r pk1;
#X obj 114 289 r pk2;
#X obj 206 290 r pk3;
#X obj 297 290 r pk4;
#X obj 389 289 r pk5;
#X obj 479 288 r pk6;
#X obj 571 289 r pk7;
#X obj 662 289 r pk8;
#X obj 1139 463 r initBang;
#X obj 24 452 vsl 81 128 0 1 0 0 empty empty empty 0 -9 0 15 -191407
-1 -33289 0 1;
#X obj 24 594 s vol1;
#X obj 24 428 r subVol1;
#X obj 114 451 vsl 81 128 0 1 0 0 empty empty empty 0 -9 0 15 -191407
-1 -33289 0 1;
#X obj 114 595 s vol2;
#X obj 114 427 r subVol2;
#X obj 207 451 vsl 81 128 0 1 0 0 empty empty empty 0 -9 0 15 -191407
-1 -33289 0 1;
#X obj 207 427 r subVol3;
#X obj 207 595 s vol3;
#X obj 297 451 vsl 81 128 0 1 0 0 empty empty empty 0 -9 0 15 -191407
-1 -33289 0 1;
#X obj 297 427 r subVol4;
#X obj 297 595 s vol4;
#X obj 390 451 vsl 81 128 0 1 0 0 empty empty empty 0 -9 0 15 -191407
-1 -33289 0 1;
#X obj 480 450 vsl 81 128 0 1 0 0 empty empty empty 0 -9 0 15 -191407
-1 -33289 0 1;
#X obj 573 450 vsl 81 128 0 1 0 0 empty empty empty 0 -9 0 15 -191407
-1 -33289 0 1;
#X obj 663 450 vsl 81 128 0 1 0 0 empty empty empty 0 -9 0 15 -191407
-1 -33289 0 1;
#X obj 390 427 r subVol5;
#X obj 390 593 s vol5;
#X obj 480 426 r subVol6;
#X obj 480 594 s vol6;
#X obj 573 426 r subVol7;
#X obj 573 594 s vol7;
#X obj 663 426 r subVol8;
#X obj 663 594 s vol8;
#X obj 24 405 s fire1;
#X obj 26 259 s sD1;
#X obj 66 259 s sU1;
#X obj 114 259 s sD2;
#X obj 154 259 s sU2;
#X obj 114 402 s fire2;
#X obj 775 7 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X msg 844 183 8;
#X obj 844 212 until;
#X obj 844 242 f;
#X msg 858 161 1;
#X obj 876 241 + 1;
#N canvas 89 58 1078 622 My_RSP_TableCreator 0;
#X obj 40 434 list;
#X obj 40 506 list length;
#X text 116 530 Number of Samples in the SamplePack folder;
#X floatatom 78 530 5 0 0 0 - - -;
#X obj 100 115 40;
#X obj 163 117 60;
#X text 197 119 y starting coordinate;
#X text 104 99 x starting coordinate;
#X obj 163 140 s yStart;
#X obj 100 141 s xStart;
#X text 94 433 list = short for list append;
#X obj 40 475 t a;
#N canvas 207 137 535 334 Sample-Array-Subpatch1 0;
#X obj 220 60 table SampleArray1_1_right;
#X obj 40 60 table SampleArray1_1_left;
#X obj 220 80 table SampleArray1_2_right;
#X obj 40 80 table SampleArray1_2_left;
#X obj 220 100 table SampleArray1_3_right;
#X obj 40 100 table SampleArray1_3_left;
#X obj 220 120 table SampleArray1_4_right;
#X obj 40 120 table SampleArray1_4_left;
#X restore 761 14 pd Sample-Array-Subpatch1;
#X obj 40 20 inlet createTables;
#X text 51 45 1 - 8 go in here;
#N canvas 199 113 535 334 Sample-Array-Subpatch2 0;
#X obj 220 60 table SampleArray2_1_right;
#X obj 40 60 table SampleArray2_1_left;
#X obj 220 80 table SampleArray2_2_right;
#X obj 40 80 table SampleArray2_2_left;
#X obj 220 100 table SampleArray2_3_right;
#X obj 40 100 table SampleArray2_3_left;
#X obj 220 120 table SampleArray2_4_right;
#X obj 40 120 table SampleArray2_4_left;
#X restore 761 36 pd Sample-Array-Subpatch2;
#N canvas 201 115 535 334 Sample-Array-Subpatch3 0;
#X obj 220 60 table SampleArray3_1_right;
#X obj 40 60 table SampleArray3_1_left;
#X obj 220 80 table SampleArray3_2_right;
#X obj 40 80 table SampleArray3_2_left;
#X obj 220 100 table SampleArray3_3_right;
#X obj 40 100 table SampleArray3_3_left;
#X obj 220 120 table SampleArray3_4_right;
#X obj 40 120 table SampleArray3_4_left;
#X restore 761 59 pd Sample-Array-Subpatch3;
#N canvas 203 117 535 334 Sample-Array-Subpatch4 0;
#X obj 220 60 table SampleArray4_1_right;
#X obj 40 60 table SampleArray4_1_left;
#X obj 220 80 table SampleArray4_2_right;
#X obj 40 80 table SampleArray4_2_left;
#X obj 220 100 table SampleArray4_3_right;
#X obj 40 100 table SampleArray4_3_left;
#X obj 220 120 table SampleArray4_4_right;
#X obj 40 120 table SampleArray4_4_left;
#X restore 761 81 pd Sample-Array-Subpatch4;
#N canvas 202 116 535 334 Sample-Array-Subpatch5 0;
#X obj 220 60 table SampleArray5_1_right;
#X obj 40 60 table SampleArray5_1_left;
#X obj 220 80 table SampleArray5_2_right;
#X obj 40 80 table SampleArray5_2_left;
#X obj 220 100 table SampleArray5_3_right;
#X obj 40 100 table SampleArray5_3_left;
#X obj 220 120 table SampleArray5_4_right;
#X obj 40 120 table SampleArray5_4_left;
#X restore 761 104 pd Sample-Array-Subpatch5;
#N canvas 202 116 535 334 Sample-Array-Subpatch6 0;
#X obj 220 60 table SampleArray6_1_right;
#X obj 40 60 table SampleArray6_1_left;
#X obj 220 80 table SampleArray6_2_right;
#X obj 40 80 table SampleArray6_2_left;
#X obj 220 100 table SampleArray6_3_right;
#X obj 40 100 table SampleArray6_3_left;
#X obj 220 120 table SampleArray6_4_right;
#X obj 40 120 table SampleArray6_4_left;
#X restore 761 127 pd Sample-Array-Subpatch6;
#N canvas 204 118 535 334 Sample-Array-Subpatch7 0;
#X obj 220 60 table SampleArray7_1_right;
#X obj 40 60 table SampleArray7_1_left;
#X obj 220 80 table SampleArray7_2_right;
#X obj 40 80 table SampleArray7_2_left;
#X obj 220 100 table SampleArray7_3_right;
#X obj 40 100 table SampleArray7_3_left;
#X obj 220 120 table SampleArray7_4_right;
#X obj 40 120 table SampleArray7_4_left;
#X restore 761 150 pd Sample-Array-Subpatch7;
#N canvas 202 116 535 334 Sample-Array-Subpatch8 0;
#X obj 220 60 table SampleArray8_1_right;
#X obj 40 60 table SampleArray8_1_left;
#X obj 220 80 table SampleArray8_2_right;
#X obj 40 80 table SampleArray8_2_left;
#X obj 220 100 table SampleArray8_3_right;
#X obj 40 100 table SampleArray8_3_left;
#X obj 220 120 table SampleArray8_4_right;
#X obj 40 120 table SampleArray8_4_left;
#X restore 761 172 pd Sample-Array-Subpatch8;
#X msg 361 144 \; \$1 clear;
#X msg 334 77 symbol pd-Sample-Array-Subpatch\$1;
#X text 439 151 delete all arrays for \; the audio files;
#X msg 55 248 SamplePack\$1;
#X obj 100 270 r FolderWithAudioFiles;
#X obj 55 293 pack s s;
#X msg 55 322 symbol \$2\$1/*.wav;
#X obj 40 374 folder_list;
#X text 256 288 /home/pi/Documents/RaspiSamplePlayer/SamplePack1/*.wav
/home/pi/Documents/RaspiSamplePlayer/SamplePack2/*.wav;
#X text 255 311 /home/pi/Documents/RaspiSamplePlayer/SamplePack3/*.wav
;
#X text 255 323 /home/pi/Documents/RaspiSamplePlayer/SamplePack4/*.wav
...and so on until 8;
#X obj 85 171 s localListBang;
#X obj 61 408 r localListBang;
#X obj 40 60 t b f f b b f;
#X obj 70 206 s currentSamplePackIndex;
#X obj 85 564 r currentSamplePackIndex;
#X obj 40 610 pack f s;
#X msg 85 586 symbol SampleArray\$1;
#X msg 217 809 symbol \$2_\$1_right;
#X text 283 826 generate name of Array for each audio file! \; E.G.
SampleArray1_3_right (1=SamplePack \, 3=audio file);
#X obj 133 1117 s;
#X obj 334 110 t s s;
#X obj 334 189 s currentSubpatchName;
#X obj 148 1095 r currentSubpatchName;
#X obj 217 848 t b b b a;
#X obj 217 1022 pack f f s s;
#X msg 251 885 symbol table;
#X obj 291 951 f;
#X obj 321 951 + 20;
#X obj 306 929 r yStart;
#X obj 217 971 f;
#X obj 232 928 r xStart;
#X msg 217 1047 obj \$1 \$2 \$3 \$4;
#X obj 232 949 + 180;
#X obj 40 863 t b b b a;
#X obj 40 1037 pack f f s s;
#X msg 74 900 symbol table;
#X obj 114 966 f;
#X obj 144 966 + 20;
#X obj 129 944 r yStart;
#X obj 40 986 f;
#X obj 55 943 r xStart;
#X msg 40 1062 obj \$1 \$2 \$3 \$4;
#X msg 40 824 symbol \$2_\$1_left;
#X text 391 932 create empty tables \; for the audio files \; in the
sub patches;
#X text 279 1085 change the name of the subpatch \; to send the table
to;
#X text 757 277 In this sub patch we create empty tables \; for each
audio file inside the above visible \; subpatches!;
#X obj 103 347 t s s;
#X obj 130 372 s currentFolderName;
#X text 266 375 send current folder name . e.g. /home/pi/Documents/RaspiSamplePlayer/SamplePack3/*.wav
;
#X obj 40 672 t a a;
#X obj 643 633 route 1 2 3 4 5 6 7 8;
#X obj 688 546 r currentSamplePackIndex;
#X obj 643 571 pack f f;
#X msg 643 602 \$2 \$1;
#X obj 643 840 s AmountOfAudioFilesInSP1;
#X obj 658 815 s AmountOfAudioFilesInSP2;
#X obj 673 792 s AmountOfAudioFilesInSP3;
#X obj 689 765 s AmountOfAudioFilesInSP4;
#X obj 704 741 s AmountOfAudioFilesInSP5;
#X obj 719 712 s AmountOfAudioFilesInSP6;
#X obj 735 690 s AmountOfAudioFilesInSP7;
#X obj 750 661 s AmountOfAudioFilesInSP8;
#X text 786 578 depending on the current Sample Pack that \; we are
initializing \, we send away the number of audio files \; for this
particular Sample Pack \, so that \; we can use this number in the
different \; "SelectAndPlayEngines";
#X text 240 239 Grab the main folder specified in the main patch (/home/pi/Documents/RaspiSamplePlayer/)
and attach \; the "/SamplePackX" folders \, so that the folder list
\; object can grab the audio files from them:;
#X connect 0 0 11 0;
#X connect 1 0 3 0;
#X connect 1 0 38 0;
#X connect 1 0 75 0;
#X connect 4 0 9 0;
#X connect 5 0 8 0;
#X connect 11 0 0 1;
#X connect 11 0 1 0;
#X connect 13 0 35 0;
#X connect 23 0 43 0;
#X connect 25 0 27 0;
#X connect 26 0 27 1;
#X connect 27 0 28 0;
#X connect 28 0 69 0;
#X connect 29 0 0 0;
#X connect 34 0 0 1;
#X connect 35 0 29 0;
#X connect 35 1 25 0;
#X connect 35 2 36 0;
#X connect 35 3 33 0;
#X connect 35 4 5 0;
#X connect 35 4 4 0;
#X connect 35 5 23 0;
#X connect 37 0 39 0;
#X connect 38 0 72 0;
#X connect 39 0 38 1;
#X connect 40 0 46 0;
#X connect 43 0 44 0;
#X connect 43 1 22 0;
#X connect 45 0 42 1;
#X connect 46 0 52 0;
#X connect 46 1 49 0;
#X connect 46 2 48 0;
#X connect 46 3 47 3;
#X connect 47 0 54 0;
#X connect 48 0 47 2;
#X connect 49 0 50 0;
#X connect 49 0 47 1;
#X connect 50 0 49 1;
#X connect 51 0 49 1;
#X connect 52 0 47 0;
#X connect 53 0 55 0;
#X connect 54 0 42 0;
#X connect 55 0 52 1;
#X connect 56 0 62 0;
#X connect 56 1 59 0;
#X connect 56 2 58 0;
#X connect 56 3 57 3;
#X connect 57 0 64 0;
#X connect 58 0 57 2;
#X connect 59 0 60 0;
#X connect 59 0 57 1;
#X connect 60 0 59 1;
#X connect 61 0 59 1;
#X connect 62 0 57 0;
#X connect 63 0 62 1;
#X connect 64 0 42 0;
#X connect 65 0 56 0;
#X connect 69 0 29 1;
#X connect 69 1 70 0;
#X connect 72 0 65 0;
#X connect 72 1 40 0;
#X connect 73 0 77 0;
#X connect 73 1 78 0;
#X connect 73 2 79 0;
#X connect 73 3 80 0;
#X connect 73 4 81 0;
#X connect 73 5 82 0;
#X connect 73 6 83 0;
#X connect 73 7 84 0;
#X connect 74 0 75 1;
#X connect 75 0 76 0;
#X connect 76 0 73 0;
#X restore 883 310 pd My_RSP_TableCreator;
#N canvas 121 61 1063 613 My_RSP_TableReader 0;
#X obj -455 78 t b b;
#X obj -428 105 1;
#X obj -428 133 s sampleCount;
#X text -393 104 counting the samples starting at 1;
#X msg -455 680 \$1;
#X obj -455 858 pack s s;
#X obj -455 937 soundfiler;
#X msg -455 886 read -resize \$1 \$2_left \$2_right;
#X obj -455 23 inlet;
#X obj -455 51 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text -455 209 this spits out the sample names one after another
as a symbol;
#X text -350 847 pack the sample name and the corresponding table name
into a list \, so that the message "read" can handle them as $ variables
;
#X obj -455 965 outlet numberOfSamples;
#X text -576 679 \$1 = the different \; sample names \; one after another
;
#X msg -401 500 read \$1;
#X obj -401 528 soundfile_info;
#X text -305 526 get header data of each audio file as a list;
#X text -306 544 grab only the sample rate of each audio file;
#X obj -401 593 s sampleRateOfCurrentSample;
#X obj -455 182 folder_list;
#X obj -392 158 r currentFolderName;
#X obj -404 650 r sampleCount;
#X obj -419 680 f;
#X obj -390 680 + 1;
#X text -365 679 count the amount of samples;
#X text -363 694 init the counter with 1;
#X obj -419 780 pack f s;
#X obj -374 725 r currentSamplePackIndex;
#X msg -374 753 symbol SampleArray\$1;
#X msg -419 808 symbol \$2_\$1;
#X text -110 22 this patch looks into the \; specified folder and outputs:
\; 1 outlet: number of samples of \; each audio file one after another
\; It also sends the sample rate \; of each audio file one after \;
another so that the next sub patch \; "ValueCalculationForPlayingAudio"
\; receives the correct sample rate for \; the calculations according
to each \; audio file.;
#X obj -401 564 list split 1;
#X obj -455 246 t a b a a;
#N canvas 0 50 718 628 My_RSP_filenameExtraction 0;
#X obj 21 70 s2l /;
#X obj 88 127 list length;
#X obj 21 94 t a a;
#X text 132 184 list index of samplename.wav;
#X floatatom 88 184 5 0 0 0 - - -;
#X obj 21 208 list split;
#X obj 88 156 - 1;
#X obj 21 235 s2l .;
#X msg 21 265 \$1;
#X obj 21 36 inlet filenameAndDirectory;
#X text 257 38 13th February 2019 This subpatch extracts the filename
of an audio sample \; when it is surrounded by its path. The input
should be a symbol or atom containing the path \; to the audio file.
E.g: \; INPUT: /home/pi/samplename.wav \; UUTPUT: samplename;
#X obj 21 294 outlet filename;
#X connect 0 0 2 0;
#X connect 1 0 6 0;
#X connect 2 0 5 0;
#X connect 2 1 1 0;
#X connect 4 0 5 1;
#X connect 5 1 7 0;
#X connect 6 0 4 0;
#X connect 7 0 8 0;
#X connect 8 0 11 0;
#X connect 9 0 0 0;
#X restore -368 301 pd My_RSP_filenameExtraction;
#X obj -368 330 list prepend;
#X obj -368 432 s;
#X obj -263 347 r currentSamplePackIndex;
#X msg -236 408 symbol listFileNames\$1;
#X obj -368 351 t a;
#X obj -263 368 t b f;
#X text -190 300 extract sample names from path;
#X text 10 295 send lists of sample names to each of the eight \; different
SelectAndPlay-Subpatches. \; SelectAndPlayEngine1 receives a list with
the sample names \; in /home/pi..../SamplePack1. \; SelectAndPlayEngine2
receives a list with the sample names \; in home/pi/..../SamplePack2
and so on...;
#X text -220 372 the bang resets the list-prepend-object. \; By this
we get a new list when the currentSampleIndex \; changes.;
#X connect 0 0 19 0;
#X connect 0 1 1 0;
#X connect 1 0 2 0;
#X connect 4 0 5 0;
#X connect 5 0 7 0;
#X connect 6 0 12 0;
#X connect 7 0 6 0;
#X connect 8 0 9 0;
#X connect 9 0 0 0;
#X connect 14 0 15 0;
#X connect 15 0 31 0;
#X connect 19 0 32 0;
#X connect 20 0 19 1;
#X connect 21 0 22 1;
#X connect 22 0 23 0;
#X connect 22 0 26 0;
#X connect 23 0 22 1;
#X connect 26 0 29 0;
#X connect 27 0 28 0;
#X connect 28 0 26 1;
#X connect 29 0 5 1;
#X connect 31 0 18 0;
#X connect 32 0 4 0;
#X connect 32 1 22 0;
#X connect 32 2 14 0;
#X connect 32 3 33 0;
#X connect 33 0 34 0;
#X connect 34 0 38 0;
#X connect 36 0 39 0;
#X connect 37 0 35 1;
#X connect 38 0 34 1;
#X connect 38 0 35 0;
#X connect 39 0 34 1;
#X connect 39 1 37 0;
#X restore 863 346 pd My_RSP_TableReader;
#X text 885 330 read samples from disk into tables;
#N canvas 135 97 962 563 My_RSP_ValueCalculationForPlayingAudio 0;
#X obj 21 19 inlet numberOfSamplesOfAllAudioFiles;
#X obj 66 69 r currentSamplePackIndex;
#X obj 21 96 pack f f;
#X msg 21 127 \$2 \$1;
#X obj 21 177 route 1 2 3 4 5 6 7 8;
#N canvas 455 313 719 406 My_RSP_ValueCalc1 0;
#X obj 42 42 inlet first;
#X obj 42 158 expr $f2 / $f1;
#X obj 42 241 t a;
#X obj 63 188 r initBang;
#X obj 42 78 t f f;
#X obj 380 147 t a;
#X obj 449 102 r initBang;
#X text 429 144 list = number of Samples of each Sample;
#X obj 42 214 list prepend;
#X obj 380 126 list prepend;
#X text 129 215 We put all calculation results \; into a list \, so
we can grab them \; with a index out of the list \; when we want to
choose which \; audio file should be played;
#X text 395 237 Here we also put the number of samples of each \; audio
file into a list \, so we can also grab this \; value when choosing
the audio file that should \; be played.;
#X obj 123 134 r sampleRateOfCurrentSample;
#X text 140 153 sampleRate/NumberOfSamplesOfAudioFile \; = Rate for
phasor object;
#X obj 42 313 s listValuesForPhasor1;
#X obj 380 311 s listNumberOfSamplesOfEachAudioFile1;
#X connect 0 0 4 0;
#X connect 1 0 8 0;
#X connect 2 0 8 1;
#X connect 2 0 14 0;
#X connect 3 0 8 1;
#X connect 4 0 1 0;
#X connect 4 1 9 0;
#X connect 5 0 9 1;
#X connect 5 0 15 0;
#X connect 6 0 9 1;
#X connect 8 0 2 0;
#X connect 9 0 5 0;
#X connect 12 0 1 1;
#X restore 21 404 pd My_RSP_ValueCalc1;
#N canvas 455 236 719 406 My_RSP_ValueCalc2 0;
#X obj 42 158 expr $f2 / $f1;
#X obj 42 241 t a;
#X obj 63 188 r initBang;
#X obj 42 78 t f f;
#X obj 380 147 t a;
#X obj 449 102 r initBang;
#X text 429 144 list = number of Samples of each Sample;
#X obj 42 214 list prepend;
#X obj 380 126 list prepend;
#X text 129 215 We put all calculation results \; into a list \, so
we can grab them \; with a index out of the list \; when we want to
choose which \; audio file should be played;
#X text 395 237 Here we also put the number of samples of each \; audio
file into a list \, so we can also grab this \; value when choosing
the audio file that should \; be played.;
#X obj 123 134 r sampleRateOfCurrentSample;
#X text 140 153 sampleRate/NumberOfSamplesOfAudioFile \; = Rate for
phasor object;
#X obj 42 42 inlet second;
#X obj 42 313 s listValuesForPhasor2;
#X obj 380 311 s listNumberOfSamplesOfEachAudioFile2;
#X connect 0 0 7 0;
#X connect 1 0 7 1;
#X connect 1 0 14 0;
#X connect 2 0 7 1;
#X connect 3 0 0 0;
#X connect 3 1 8 0;
#X connect 4 0 8 1;
#X connect 4 0 15 0;
#X connect 5 0 8 1;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X connect 11 0 0 1;
#X connect 13 0 3 0;
#X restore 36 378 pd My_RSP_ValueCalc2;
#N canvas 454 235 719 406 My_RSP_ValueCalc3 0;
#X obj 42 158 expr $f2 / $f1;
#X obj 42 241 t a;
#X obj 63 188 r initBang;
#X obj 42 78 t f f;
#X obj 380 147 t a;
#X obj 449 102 r initBang;
#X text 429 144 list = number of Samples of each Sample;
#X obj 42 214 list prepend;
#X obj 380 126 list prepend;
#X text 129 215 We put all calculation results \; into a list \, so
we can grab them \; with a index out of the list \; when we want to
choose which \; audio file should be played;
#X text 395 237 Here we also put the number of samples of each \; audio
file into a list \, so we can also grab this \; value when choosing
the audio file that should \; be played.;
#X obj 123 134 r sampleRateOfCurrentSample;
#X text 140 153 sampleRate/NumberOfSamplesOfAudioFile \; = Rate for
phasor object;
#X obj 42 42 inlet third;
#X obj 42 313 s listValuesForPhasor3;
#X obj 380 311 s listNumberOfSamplesOfEachAudioFile3;
#X connect 0 0 7 0;
#X connect 1 0 7 1;
#X connect 1 0 14 0;
#X connect 2 0 7 1;
#X connect 3 0 0 0;
#X connect 3 1 8 0;
#X connect 4 0 8 1;
#X connect 4 0 15 0;
#X connect 5 0 8 1;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X connect 11 0 0 1;
#X connect 13 0 3 0;
#X restore 51 353 pd My_RSP_ValueCalc3;
#N canvas 453 234 719 406 My_RSP_ValueCalc4 0;
#X obj 42 158 expr $f2 / $f1;
#X obj 42 241 t a;
#X obj 63 188 r initBang;
#X obj 42 78 t f f;
#X obj 380 147 t a;
#X obj 449 102 r initBang;
#X text 429 144 list = number of Samples of each Sample;
#X obj 42 214 list prepend;
#X obj 380 126 list prepend;
#X text 129 215 We put all calculation results \; into a list \, so
we can grab them \; with a index out of the list \; when we want to
choose which \; audio file should be played;
#X text 395 237 Here we also put the number of samples of each \; audio
file into a list \, so we can also grab this \; value when choosing
the audio file that should \; be played.;
#X obj 123 134 r sampleRateOfCurrentSample;
#X text 140 153 sampleRate/NumberOfSamplesOfAudioFile \; = Rate for
phasor object;
#X obj 42 42 inlet fourth;
#X obj 42 313 s listValuesForPhasor4;
#X obj 380 311 s listNumberOfSamplesOfEachAudioFile4;
#X connect 0 0 7 0;
#X connect 1 0 7 1;
#X connect 1 0 14 0;
#X connect 2 0 7 1;
#X connect 3 0 0 0;
#X connect 3 1 8 0;
#X connect 4 0 8 1;
#X connect 4 0 15 0;
#X connect 5 0 8 1;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X connect 11 0 0 1;
#X connect 13 0 3 0;
#X restore 67 328 pd My_RSP_ValueCalc4;
#N canvas 451 232 719 406 My_RSP_ValueCalc5 0;
#X obj 42 158 expr $f2 / $f1;
#X obj 42 241 t a;
#X obj 63 188 r initBang;
#X obj 42 78 t f f;
#X obj 380 147 t a;
#X obj 449 102 r initBang;
#X text 429 144 list = number of Samples of each Sample;
#X obj 42 214 list prepend;
#X obj 380 126 list prepend;
#X text 129 215 We put all calculation results \; into a list \, so
we can grab them \; with a index out of the list \; when we want to
choose which \; audio file should be played;
#X text 395 237 Here we also put the number of samples of each \; audio
file into a list \, so we can also grab this \; value when choosing
the audio file that should \; be played.;
#X obj 123 134 r sampleRateOfCurrentSample;
#X text 140 153 sampleRate/NumberOfSamplesOfAudioFile \; = Rate for
phasor object;
#X obj 42 42 inlet fifth;
#X obj 42 313 s listValuesForPhasor5;
#X obj 380 311 s listNumberOfSamplesOfEachAudioFile5;
#X connect 0 0 7 0;
#X connect 1 0 7 1;
#X connect 1 0 14 0;
#X connect 2 0 7 1;
#X connect 3 0 0 0;
#X connect 3 1 8 0;
#X connect 4 0 8 1;
#X connect 4 0 15 0;
#X connect 5 0 8 1;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X connect 11 0 0 1;
#X connect 13 0 3 0;
#X restore 82 304 pd My_RSP_ValueCalc5;
#N canvas 450 231 719 406 My_RSP_ValueCalc6 0;
#X obj 42 158 expr $f2 / $f1;
#X obj 42 241 t a;
#X obj 63 188 r initBang;
#X obj 42 78 t f f;
#X obj 380 147 t a;
#X obj 449 102 r initBang;
#X text 429 144 list = number of Samples of each Sample;
#X obj 42 214 list prepend;
#X obj 380 126 list prepend;
#X text 129 215 We put all calculation results \; into a list \, so
we can grab them \; with a index out of the list \; when we want to
choose which \; audio file should be played;
#X text 395 237 Here we also put the number of samples of each \; audio
file into a list \, so we can also grab this \; value when choosing
the audio file that should \; be played.;
#X obj 123 134 r sampleRateOfCurrentSample;
#X text 140 153 sampleRate/NumberOfSamplesOfAudioFile \; = Rate for
phasor object;
#X obj 42 313 s listValuesForPhasor6;
#X obj 380 311 s listNumberOfSamplesOfEachAudioFile6;
#X obj 42 42 inlet sixth;
#X connect 0 0 7 0;
#X connect 1 0 7 1;
#X connect 1 0 13 0;
#X connect 2 0 7 1;
#X connect 3 0 0 0;
#X connect 3 1 8 0;
#X connect 4 0 8 1;
#X connect 4 0 14 0;
#X connect 5 0 8 1;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X connect 11 0 0 1;
#X connect 15 0 3 0;
#X restore 97 281 pd My_RSP_ValueCalc6;
#N canvas 449 230 719 406 My_RSP_ValueCalc7 0;
#X obj 42 158 expr $f2 / $f1;
#X obj 42 241 t a;
#X obj 63 188 r initBang;
#X obj 42 78 t f f;
#X obj 380 147 t a;
#X obj 449 102 r initBang;
#X text 429 144 list = number of Samples of each Sample;
#X obj 42 214 list prepend;
#X obj 380 126 list prepend;
#X text 129 215 We put all calculation results \; into a list \, so
we can grab them \; with a index out of the list \; when we want to
choose which \; audio file should be played;
#X text 395 237 Here we also put the number of samples of each \; audio
file into a list \, so we can also grab this \; value when choosing
the audio file that should \; be played.;
#X obj 123 134 r sampleRateOfCurrentSample;
#X text 140 153 sampleRate/NumberOfSamplesOfAudioFile \; = Rate for
phasor object;
#X obj 42 42 inlet seventh;
#X obj 42 313 s listValuesForPhasor7;
#X obj 380 311 s listNumberOfSamplesOfEachAudioFile7;
#X connect 0 0 7 0;
#X connect 1 0 7 1;
#X connect 1 0 14 0;
#X connect 2 0 7 1;
#X connect 3 0 0 0;
#X connect 3 1 8 0;
#X connect 4 0 8 1;
#X connect 4 0 15 0;
#X connect 5 0 8 1;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X connect 11 0 0 1;
#X connect 13 0 3 0;
#X restore 113 259 pd My_RSP_ValueCalc7;
#N canvas 448 229 719 406 My_RSP_ValueCalc8 0;
#X obj 42 158 expr $f2 / $f1;
#X obj 42 241 t a;
#X obj 63 188 r initBang;
#X obj 42 78 t f f;
#X obj 380 147 t a;
#X obj 449 102 r initBang;
#X text 429 144 list = number of Samples of each Sample;
#X obj 42 214 list prepend;
#X obj 380 126 list prepend;
#X text 129 215 We put all calculation results \; into a list \, so
we can grab them \; with a index out of the list \; when we want to
choose which \; audio file should be played;
#X text 395 237 Here we also put the number of samples of each \; audio
file into a list \, so we can also grab this \; value when choosing
the audio file that should \; be played.;
#X obj 123 134 r sampleRateOfCurrentSample;
#X text 140 153 sampleRate/NumberOfSamplesOfAudioFile \; = Rate for
phasor object;
#X obj 42 42 inlet eigth;
#X obj 42 313 s listValuesForPhasor8;
#X obj 380 311 s listNumberOfSamplesOfEachAudioFile8;
#X connect 0 0 7 0;
#X connect 1 0 7 1;
#X connect 1 0 14 0;
#X connect 2 0 7 1;
#X connect 3 0 0 0;
#X connect 3 1 8 0;
#X connect 4 0 8 1;
#X connect 4 0 15 0;
#X connect 5 0 8 1;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X connect 11 0 0 1;
#X connect 13 0 3 0;
#X restore 128 235 pd My_RSP_ValueCalc8;
#X text 324 16 13th April 2018 In this patch we \; calculate the values
that we \; need for the phasor object \; and the audio multiplication
object \; in order to play our samples with \; the tabread4~ interpolation
object. \; These values are calculated and put into \; sixteen different
lists (2 lists for each of \; the 8 Sample Packs). The eight different
lists \; are sent away so we can use them \; seperately in the different
"SelectAndPlayEngines".;
#X connect 0 0 2 0;
#X connect 1 0 2 1;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 4 1 6 0;
#X connect 4 2 7 0;
#X connect 4 3 8 0;
#X connect 4 4 9 0;
#X connect 4 5 10 0;
#X connect 4 6 11 0;
#X connect 4 7 12 0;
#X restore 863 405 pd My_RSP_ValueCalculationForPlayingAudio;
#X obj 775 585 s startMetroBang;
#X obj 872 136 s FolderWithAudioFiles;
#X text 887 294 create empty tables and send number of audio files
;
#X text 871 366 number of Samples of each Sample one after another
\; for value calculation needed by tabread4~ in the \; "SelectAndPlayEngines"
;
#N canvas 387 111 450 403 EightInitBangs 0;
#X text 225 46 19th April \; In this patch we send eight bangs \; to
the eight "SelectAndPlayEngines" to initialize the index generation
\; within them.;
#X obj 45 54 inlet SPIndex;
#X floatatom 45 93 5 0 0 0 - - -;
#X obj 45 204 s;
#X text 215 169 create send-variable initIndexBang1 \; initIndexBang2
\; initIndexBang3.......;
#X obj 43 246 r initIndexBang1;
#X obj 43 274 print i1;
#X obj 103 266 r initIndexBang2;
#X obj 103 294 print i2;
#X obj 163 296 r initIndexBang3;
#X obj 163 324 print i3;
#X obj 233 316 r initIndexBang4;
#X obj 233 344 print i4;
#X msg 72 176 symbol initIndexBang\$1;
#X obj 45 139 t b f;
#X text 77 206 send away the bang;
#X connect 1 0 2 0;
#X connect 2 0 14 0;
#X connect 5 0 6 0;
#X connect 7 0 8 0;
#X connect 9 0 10 0;
#X connect 11 0 12 0;
#X connect 13 0 3 1;
#X connect 14 0 3 0;
#X connect 14 1 13 0;
#X restore 844 435 pd EightInitBangs;
#X obj 886 71 s initBang;
#X text 877 88 specify the folder above the sample pack folders;
#X text 891 161 start counting at 1...;
#X text 888 188 ...and iterate through \; 8 sample packs;
#X text 920 274 this is executed eight times...;
#X text 1137 445 turn audio on;
#X obj 206 401 s fire3;
#X obj 204 261 s sD3;
#X obj 244 261 s sU3;
#X obj 294 261 s sD4;
#X obj 334 261 s sU4;
#X obj 297 400 s fire4;
#X obj 389 400 s fire5;
#X msg 1139 498 \; pd dsp 1;
#X obj 384 263 s sD5;
#X obj 424 263 s sU5;
#X obj 474 264 s sD6;
#X obj 514 264 s sU6;
#X obj 479 400 s fire6;
#X obj 675 24 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407 -1
-1;
#X obj 675 70 s stopAll;
#X obj 675 -1 r extraPush;
#X obj 568 263 s sD7;
#X obj 608 263 s sU7;
#X obj 571 400 s fire7;
#X obj 658 263 s sD8;
#X obj 698 263 s sU8;
#X obj 662 400 s fire8;
#X obj 662 312 bng 80 400 50 0 empty empty empty 17 7 0 10 -4034 -1
-1;
#X obj 571 312 bng 80 400 50 0 empty empty empty 17 7 0 10 -257985
-1 -1;
#X obj 479 312 bng 80 400 50 0 empty empty empty 17 7 0 10 -258113
-262144 -1;
#X obj 389 312 bng 80 400 50 0 empty empty empty 17 7 0 10 -4160 -262144
-1;
#X obj 297 313 bng 80 400 50 0 empty empty empty 17 7 0 10 -4034 -1
-1;
#X obj 206 313 bng 80 400 50 0 empty empty empty 17 7 0 10 -257985
-1 -1;
#X obj 114 313 bng 80 400 50 0 empty empty empty 17 7 0 10 -258113
-262144 -1;
#X obj 24 313 bng 80 400 50 0 empty empty empty 17 7 0 10 -4160 -262144
-1;
#N canvas 0 93 1280 627 My_RSP_EightPlayAndSelectEngines 1;
#N canvas 162 69 1075 621 My_RSP_SelectAndPlayEngine1 0;
#X obj 8 21 inlet playButton1;
#X obj 267 9 inlet selectUp1;
#X obj 380 9 inlet selectDown1;
#N canvas 96 74 1013 640 My_RSP_IndexGenerator1 0;
#X obj 129 222 moses;
#X obj 201 205 / 2;
#X msg 129 173 1;
#X obj 129 283 +;
#X obj 159 283 f;
#X obj 322 318 clip;
#X obj 305 143 t b b;
#X obj 305 118 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 332 239 1;
#X obj 156 253 -;
#X obj 163 173 f;
#X obj 193 173 - 1;
#X floatatom 230 393 5 0 0 0 - - -;
#X obj 223 371 <= 0;
#X obj 129 349 >;
#X obj 269 406 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 129 471 spigot;
#X obj 129 447 f;
#X obj 129 374 t b f;
#X obj 144 414 r sP1Index;
#X obj 229 433 t b f;
#X obj 229 454 f;
#X obj 229 480 spigot;
#X obj 284 437 r sP1Index;
#X obj 320 166 r AmountOfAudioFilesInSP1;
#X obj 305 188 f;
#X floatatom 342 189 5 0 0 0 - - -;
#X obj 163 62 inlet decreaseIndexSP1;
#X obj 129 36 inlet increaseIndexSP1;
#X obj 305 89 inlet bangToInitWithNumberOfIndexes;
#X obj 129 549 outlet LastSampleReachedSP1;
#X obj 229 523 outlet FirstSampleReachedSP1;
#X obj 259 351 s sP1Index;
#X obj 322 392 outlet SP1_Index;
#X text 590 36 This patch puts out the desired index number which controls
the desired audiosample to be played. \; inlets: \; left: increase
index \; middle: decrease index \; right: init the patch with the max
number of audio files \; Before the patch is init-banged \, it has
to receive "AmountOfAudioSamplesInSP1 to know the max number the index
is allowed to be \; outlets \; left: bang when the maximum index is
reached \; middle: bang when the minimum index is reached \; right:
current index;
#X obj 305 212 s maxNoOfSamples1;
#X obj 193 152 r maxNoOfSamples1;
#X obj 144 325 r maxNoOfSamples1;
#X obj 171 230 r maxNoOfSamples1;
#X obj 372 295 r maxNoOfSamples1;
#X text 11 104 increase \; SamplePack1Index;
#X text 175 108 decrease \; SamplePack1Index;
#X text 437 394 output the index;
#X text 414 527 output warning bang (first index reached);
#X text 302 550 output warning bang (last index reached);
#X connect 0 0 3 0;
#X connect 0 1 9 0;
#X connect 1 0 0 1;
#X connect 2 0 0 0;
#X connect 3 0 5 0;
#X connect 3 0 13 0;
#X connect 3 0 14 0;
#X connect 4 0 3 1;
#X connect 5 0 4 0;
#X connect 5 0 32 0;
#X connect 5 0 33 0;
#X connect 6 0 25 0;
#X connect 6 1 8 0;
#X connect 7 0 6 0;
#X connect 8 0 5 1;
#X connect 9 0 3 0;
#X connect 10 0 0 0;
#X connect 11 0 10 1;
#X connect 12 0 15 0;
#X connect 12 0 20 0;
#X connect 13 0 12 0;
#X connect 14 0 18 0;
#X connect 16 0 30 0;
#X connect 17 0 16 0;
#X connect 18 0 17 0;
#X connect 18 1 16 1;
#X connect 19 0 17 1;
#X connect 20 0 21 0;
#X connect 20 1 22 1;
#X connect 21 0 22 0;
#X connect 22 0 31 0;
#X connect 23 0 21 1;
#X connect 24 0 25 1;
#X connect 24 0 26 0;
#X connect 25 0 1 0;
#X connect 25 0 35 0;
#X connect 27 0 10 0;
#X connect 28 0 2 0;
#X connect 29 0 7 0;
#X connect 36 0 11 0;
#X connect 37 0 14 1;
#X connect 38 0 9 1;
#X connect 39 0 5 2;
#X restore 267 143 pd My_RSP_IndexGenerator1;
#X obj 275 197 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 346 172 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 265 531 zl nth;
#X obj 384 598 zl nth;
#X floatatom 414 167 5 0 0 0 - - -;
#X obj 265 664 phasor~;
#X obj 266 703 *~;
#X obj 399 414 t f f f;
#X obj 571 593 makefilename SampleArray1_%d;
#X obj 529 792 *~;
#X obj 529 738 tabread4~ \$1;
#X msg 662 619 set \$1_right;
#X obj 399 389 f;
#X msg 23 252 0;
#X msg 68 527 0;
#X obj 381 739 tabread4~ \$1;
#X msg 571 618 set \$1_left;
#X obj 380 791 *~;
#X floatatom 384 624 20 0 0 0 - - -;
#X obj 395 765 r vol1;
#X obj 71 176 s pb1_1;
#X obj 399 367 r pb1_1;
#X obj 55 199 s pb1_2;
#X obj 394 566 r pb1_2;
#X obj 39 223 s pb1_3;
#X obj 211 444 r pb1_3;
#X text 448 149 generate an index between 1 and max number of audio
files \; in folder "samplepack1" to select one audio file to play.
;
#X text 474 411 pass the index to the zl nth objects \; to determine
which values should be \; grabbed out of the value lists the next \;
time the zl nth objects are banged by the \; "playbang (pb1_n).;
#X text 131 178 pb = playbang;
#X text 50 246 start playing \; the audio file;
#X text 450 587 grab number of \; samples of the \; selected audio
file;
#X text 160 535 grab frequency \; for phasor \; according to the \;
selected audio \; file;
#X text 757 624 build array name \; containing the \; selected index
\; so the tabread object \; knows which array \; to read from.;
#X text 466 832 AUDIO OUTPUT;
#X obj 380 811 outlet~ toDacLeft1;
#X obj 530 812 outlet~ toDacRight1;
#X text 444 761 adjust volume \; (from fader 1);
#X text 590 8 13th April 2018 \; This patch plays the audio files in
the \; SamplePack1 folder. The desired audio file \; is selected by
an index. The index can be \; changed by the 2nd and 3rd inlet (e.g.
by \; the computer's keys or hid input). A bang on the first inlet
plays the selected \; audio file. \; \; OUTLETS: Audio output for dac
object (left and right);
#X obj 265 495 r listValuesForPhasor1;
#X obj 384 546 r listNumberOfSamplesOfEachAudioFile1;
#X obj 414 111 r initIndexBang1;
#X obj 68 497 r stopAll;
#X obj 134 740 r metroHits;
#X obj 134 773 snapshot~;
#X obj 134 819 /;
#X text -34 501 stop playing \; and reset phase;
#X text -39 718 ***SYNCING PLAYBACK TO METRONOME***;
#X text -61 796 divide by the number of \; samples of the currently
\; playing audio file to make the \; position a value between 0 and
1;
#X text -59 857 output on the right outlet \; if the end is almost
reached.;
#X text -22 906 send a wish for playback \; which will ONLY BE ACKNOWLEGDED
\; by the metronome:);
#X text -62 741 get the metronome's 16th notes;
#X text -60 763 get position of the \; currently playing sample;
#X floatatom 141 895 5 0 0 0 - - -;
#X floatatom 210 967 5 0 0 0 - - -;
#X obj 210 991 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 253 907 0;
#X obj 191 907 spigot 1;
#X msg 191 1073 1;
#X obj 191 1097 s openSpigot1;
#X obj 236 880 r openSpigot1;
#X obj 191 937 t b f b;
#X obj 191 1048 delay 2000;
#X obj 275 95 r indexInit;
#X text 273 46 select first \; sample after \; loading the patch;
#N canvas 329 283 450 300 My_RSP_LedAlert 0;
#X text 199 46 this patch toggles the blue led \; on gpio24 to show
that the first or last \; sample is reached.;
#X obj 71 150 wiringPi_gpio 24 0 0;
#X msg 71 119 1;
#X obj 44 85 t b b;
#X msg 44 217 0;
#X obj 44 186 delay 100;
#X obj 44 30 inlet alertBang;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 3 1 2 0;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 6 0 3 0;
#X restore 225 239 pd My_RSP_LedAlert;
#X obj 267 217 print SP1>>Last Sample Reached;
#X obj 340 192 print SP1>>First Sample Reached;
#X floatatom 616 394 5 0 0 0 - - -;
#X obj 616 372 r indexCorrectionForLoopingSP1;
#N canvas 1 102 1015 566 My_RSP_Looping_Index_Handler1 0;
#X text 603 28 29th August 2018 This subpatch receives a bang on its
inlet \, when the currently played sample has reached its end. This
subpatch then checks if the currently playing sample is still selected
by the user or not. If not \, there has to be sent an index correction
to the zl nth objects of the parent patch ("RSP_SelectAndPlayEngine")
in order to loop the currently playing sample;
#X obj 131 301 ==;
#X obj 146 132 r currentSelectedIndexSP1;
#X floatatom 146 278 5 0 0 0 - - -;
#X floatatom 146 158 5 0 0 0 - - -;
#X obj 146 209 r lastIndexPlayedSP1;
#X obj 131 186 f;
#X floatatom 131 328 5 0 0 0 - - -;
#X obj 146 240 t f f;
#X obj 131 410 f;
#X obj 170 499 s indexCorrectionForLoopingSP1;
#X obj 131 356 moses 1;
#X text 243 233 if the currentSelectedIndex is not equal to the lastPlayedIndex
\, then moses receives a 0 and bangs at its left outlet. In this case
we have to send indexCorrectionforLooping (==the lastPlayedIndex) in
front of the zl nth objects above. By this \, the sample that is currently
playing is looped when it has reached its end. Otherwise the system
would always play the currently selected sample \, which might be different
from the currently played sample because the user might have chosen
another sample in the meantime \;;
#X floatatom 176 478 5 0 0 0 - - -;
#X obj 131 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 150 519 s loopingFire1;
#X obj 270 465 print SP1: loopingFire1 playing currently selected sample
;
#X obj 285 419 r currentSelectedIndexSP1;
#X obj 270 443 f;
#X floatatom 297 443 5 0 0 0 - - -;
#X obj 131 541 print SP1: loopingFire1 with index correction to;
#X obj 131 31 inlet currentSampleHasReachedItsEnd1;
#X text 436 242 comment;
#X obj 170 407 t b b;
#X obj 170 383 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 131 442 t f b f;
#X connect 1 0 7 0;
#X connect 2 0 4 0;
#X connect 3 0 1 1;
#X connect 4 0 6 1;
#X connect 5 0 8 0;
#X connect 6 0 1 0;
#X connect 7 0 11 0;
#X connect 8 0 3 0;
#X connect 8 1 9 1;
#X connect 9 0 25 0;
#X connect 11 0 14 0;
#X connect 11 1 24 0;
#X connect 14 0 9 0;
#X connect 17 0 18 1;
#X connect 17 0 19 0;
#X connect 18 0 16 0;
#X connect 21 0 6 0;
#X connect 23 0 18 0;
#X connect 23 1 15 0;
#X connect 24 0 23 0;
#X connect 25 0 20 0;
#X connect 25 1 15 0;
#X connect 25 2 13 0;
#X connect 25 2 10 0;
#X restore 210 1016 pd My_RSP_Looping_Index_Handler1;
#X text 263 929 here we only let the first value \; of the moses' right
output come through;
#X obj 469 287 f;
#X obj 469 249 r updateZlnthObjectsBang1;
#X obj 414 311 s currentSelectedIndexSP1;
#X text 503 288 store current selected index;
#X text 574 303 send currentSelectedIndex to subpatch "Looping_Index_Handler"
and to parent patch;
#X obj 414 249 t f f;
#X floatatom 180 843 5 0 0 0 - - -;
#X obj 134 865 moses 0.98;
#X floatatom 265 584 40 0 0 0 - - -;
#X obj 355 1174 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 -257985
-1 -1 0 1;
#X floatatom 214 809 20 0 0 0 - - -;
#X text 595 1012 ein bang im parentpatch ist ressourcenfreundlicher
;
#X floatatom 774 826 20 0 0 0 - - -;
#X obj 553 1069 f 0;
#X floatatom 552 1102 5 0 0 0 - - -;
#X obj 584 1042 +;
#X obj 554 1163 moses 1;
#X obj 553 1023 bng 15 50 10 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 553 869 r metro4_4;
#X floatatom 674 1078 5 0 0 0 - - -;
#X obj 631 1045 f;
#X obj 631 1025 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 755 1093 f 1;
#X obj 755 1124 -;
#X floatatom 618 1145 10 0 0 0 - - -;
#X obj 774 899 * 60;
#X floatatom 774 928 5 0 0 0 - - -;
#X floatatom 790 1068 10 0 0 0 - - -;
#X obj 983 919 / 488;
#X obj 928 942 / 122;
#X obj 947 921 / 244;
#X msg 598 1088 0;
#X obj 589 904 r metroFirstHit;
#X msg 589 933 1;
#X obj 553 968 spigot;
#X obj 992 950 / 100;
#X obj 265 620 *;
#X msg 624 951 0;
#X obj 774 876 * 1;
#X obj 789 851 r PhasorFrequencyTimingFactor;
#X floatatom 841 891 5 0 0 0 - - -;
#X obj 789 970 r currentBPM;
#X obj 774 996 /;
#X floatatom 826 995 5 0 0 0 - - -;
#X obj 8 149 t b b b b b;
#X obj 8 289 s pb1_4;
#X text -24 310 start time sync mechanism;
#X obj 750 1046 r pb1_4;
#X obj -17 604 r PhasorFrequencyTimingFactor;
#X floatatom 7 641 5 0 0 0 - - -;
#X obj 173 406 r pb1_4;
#X connect 0 0 119 0;
#X connect 1 0 3 0;
#X connect 2 0 3 1;
#X connect 3 0 4 0;
#X connect 3 0 68 0;
#X connect 3 0 69 0;
#X connect 3 1 5 0;
#X connect 3 1 68 0;
#X connect 3 1 70 0;
#X connect 3 2 8 0;
#X connect 6 0 83 0;
#X connect 6 0 87 0;
#X connect 7 0 10 1;
#X connect 7 0 22 0;
#X connect 8 0 80 0;
#X connect 9 0 10 0;
#X connect 10 0 14 0;
#X connect 10 0 19 0;
#X connect 10 0 47 0;
#X connect 11 0 6 1;
#X connect 11 1 7 1;
#X connect 11 2 12 0;
#X connect 12 0 15 0;
#X connect 12 0 20 0;
#X connect 13 0 39 0;
#X connect 14 0 13 0;
#X connect 15 0 14 0;
#X connect 16 0 11 0;
#X connect 17 0 9 1;
#X connect 18 0 9 0;
#X connect 19 0 21 0;
#X connect 20 0 19 0;
#X connect 21 0 38 0;
#X connect 22 0 48 1;
#X connect 23 0 21 1;
#X connect 23 0 13 1;
#X connect 25 0 16 0;
#X connect 27 0 7 0;
#X connect 29 0 6 0;
#X connect 42 0 6 0;
#X connect 43 0 7 0;
#X connect 44 0 3 2;
#X connect 45 0 18 0;
#X connect 46 0 47 0;
#X connect 47 0 48 0;
#X connect 47 0 85 0;
#X connect 48 0 81 0;
#X connect 48 0 82 0;
#X connect 57 0 58 0;
#X connect 58 0 73 0;
#X connect 59 0 60 1;
#X connect 60 0 64 0;
#X connect 61 0 62 0;
#X connect 63 0 60 1;
#X connect 64 0 65 0;
#X connect 64 1 57 0;
#X connect 64 2 59 0;
#X connect 65 0 61 0;
#X connect 66 0 3 0;
#X connect 72 0 16 1;
#X connect 72 0 71 0;
#X connect 75 0 16 1;
#X connect 76 0 75 0;
#X connect 80 0 77 0;
#X connect 80 1 75 1;
#X connect 82 0 56 0;
#X connect 83 0 111 0;
#X connect 87 0 113 0;
#X connect 88 0 90 0;
#X connect 88 0 89 0;
#X connect 89 0 9 1;
#X connect 89 0 91 0;
#X connect 89 0 84 0;
#X connect 90 0 88 1;
#X connect 91 1 96 0;
#X connect 92 0 88 0;
#X connect 93 0 109 0;
#X connect 95 0 94 0;
#X connect 95 0 88 1;
#X connect 96 0 95 0;
#X connect 97 0 98 0;
#X connect 98 0 99 0;
#X connect 99 0 91 1;
#X connect 100 0 101 0;
#X connect 101 0 104 0;
#X connect 101 0 105 0;
#X connect 101 0 117 0;
#X connect 102 0 95 1;
#X connect 102 0 98 1;
#X connect 102 0 90 1;
#X connect 106 0 88 1;
#X connect 107 0 108 0;
#X connect 108 0 109 1;
#X connect 109 0 92 0;
#X connect 111 0 9 0;
#X connect 112 0 109 1;
#X connect 113 0 100 0;
#X connect 114 0 115 0;
#X connect 114 0 113 1;
#X connect 116 0 117 1;
#X connect 116 0 118 0;
#X connect 117 0 102 0;
#X connect 119 0 120 0;
#X connect 119 1 17 0;
#X connect 119 2 28 0;
#X connect 119 3 26 0;
#X connect 119 4 24 0;
#X connect 122 0 97 0;
#X connect 123 0 111 1;
#X connect 123 0 124 0;
#X connect 125 0 111 0;
#X restore -181 462 pd My_RSP_SelectAndPlayEngine1;
#X obj -181 515 dac~ 1 2;
#X obj -181 515 dac~ 1 2;
#N canvas 346 131 810 423 My_RSP_TimeHandler1 0;
#X obj 50 37 inlet myMetronomeFirstHit1;
#X obj 89 335 outlet myPermissionToPlay1;
#X obj 239 39 inlet myHumanDesiresPlayingSaver;
#X msg 65 145 1;
#X obj 50 198 f;
#X msg 81 198 0;
#X obj 50 224 moses 1;
#X text 486 156 This patch handles the humans \; wish to play his selected
audio \; file \, so that playback is only \; done when the metronom
has reached \; the first beat \; (just like in ableton live);
#X obj 81 175 r initBang;
#X obj 462 38 inlet myCurrentSampleDesiresLooping;
#X text 486 230 The third inlet is for looping the sample that is currently
played.;
#X text 94 286 here we distinguish between the user pressing the playbutton
and the internal looping mechanism.;
#X obj 239 60 t b b;
#X obj 462 59 t b b;
#N canvas 0 50 601 288 My_RSP_PlaywishDistinguisher1 0;
#X obj 54 96 bang;
#X obj 54 123 f;
#X msg 188 90 0;
#X msg 360 86 1;
#X obj 54 154 moses 1;
#X obj 54 175 t b b;
#X obj 54 44 inlet myReadyToPlay1;
#X obj 188 44 inlet myHumanIdentifier1;
#X obj 360 43 inlet myLoopingIdentifier1;
#X obj 54 226 s currentPlayingSampleNameBang1;
#X obj 325 225 outlet myPlaybackBang1;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 1 1;
#X connect 4 0 5 0;
#X connect 4 1 10 0;
#X connect 5 0 9 0;
#X connect 5 1 10 0;
#X connect 6 0 0 0;
#X connect 7 0 2 0;
#X connect 8 0 3 0;
#X restore 89 265 pd My_RSP_PlaywishDistinguisher1;
#X connect 0 0 4 0;
#X connect 2 0 12 0;
#X connect 3 0 4 1;
#X connect 4 0 5 0;
#X connect 4 0 6 0;
#X connect 5 0 4 1;
#X connect 6 1 14 0;
#X connect 8 0 5 0;
#X connect 9 0 13 0;
#X connect 12 0 3 0;
#X connect 12 1 14 1;
#X connect 13 0 3 0;
#X connect 13 1 14 2;
#X connect 14 0 1 0;
#X restore -181 376 pd My_RSP_TimeHandler1;
#X obj -117 129 r fire1;
#X obj -93 438 r sU1;
#X obj -4 437 r sD1;
#X obj -181 16 inlet metronomeInlet1;
#X obj 392 29 inlet metronomeInlet2;
#N canvas 455 295 775 375 My_RSP_TimeHandler2 0;
#X msg 65 108 1;
#X obj 50 151 f;
#X msg 79 150 0;
#X obj 50 177 moses 1;
#X text 466 110 This patch handles the humans \; wish to play his selected
audio \; file \, so that playback is only \; done when the metronom
has reached \; the first beat \; (just like in ableton live);
#X obj 239 39 inlet myHumanDesiresPlayingSaver2;
#X obj 50 37 inlet myMetronomeFirstHit1_2;
#X obj 89 279 outlet myPermissionToPlay2;
#X obj 79 127 r initBang;
#X obj 469 39 inlet myCurrentSampleDesiresLooping2;
#X obj 239 60 t b b;
#X obj 469 60 t b b;
#X text 96 237 here we distinguish between the user pressing the playbutton
and the internal looping mechanism.;
#N canvas 0 50 601 288 My_RSP_PlaywishDistinguisher2 0;
#X obj 54 44 inlet myReadyToPlay2;
#X obj 54 96 bang;
#X obj 54 123 f;
#X msg 188 90 0;
#X msg 360 86 1;
#X obj 54 154 moses 1;
#X obj 54 175 t b b;
#X obj 54 226 s currentPlayingSampleNameBang2;
#X obj 325 225 outlet myPlaybackBang2;
#X obj 188 44 inlet myHumanIdentifier2;
#X obj 360 43 inlet myLoopingIdentifier2;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 4 0 2 1;
#X connect 5 0 6 0;
#X connect 5 1 8 0;
#X connect 6 0 7 0;
#X connect 6 1 8 0;
#X connect 9 0 3 0;
#X connect 10 0 4 0;
#X restore 89 213 pd My_RSP_PlaywishDistinguisher2;
#X text 466 183 The third inlet is for looping \; the sample that is
currently played.;
#X connect 0 0 1 1;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 1 13 0;
#X connect 5 0 10 0;
#X connect 6 0 1 0;
#X connect 8 0 2 0;
#X connect 9 0 11 0;
#X connect 10 0 0 0;
#X connect 10 1 13 1;
#X connect 11 0 0 0;
#X connect 11 1 13 2;
#X connect 13 0 7 0;
#X restore 392 390 pd My_RSP_TimeHandler2;
#X obj 480 461 r sU2;
#X obj 569 460 r sD2;
#N canvas 61 64 1195 629 My_RSP_SelectAndPlayEngine2 0;
#X obj 265 521 zl nth;
#X obj 385 608 zl nth;
#X obj 265 594 phasor~;
#X obj 266 634 *~;
#X obj 511 772 *~;
#X obj 511 718 tabread4~ \$1;
#X msg 662 629 set \$1_right;
#X obj 399 389 f;
#X msg 64 237 0;
#X msg 81 577 0;
#X obj 363 719 tabread4~ \$1;
#X msg 571 628 set \$1_left;
#X obj 362 771 *~;
#X floatatom 385 634 10 0 0 0 - - -;
#X text 464 142 generate an index between 1 and max number of audio
files \; in folder "samplepack1" to select one audio file to play.
;
#X text 465 485 pass the index to the zl nth objects \; to determine
which values should be \; grabbed out of the value lists the next \;
time the zl nth objects are banged by the \; "playbang (pb1_n).;
#X text 175 142 pb = playbang;
#X text 91 230 start playing \; the audio file;
#X text 451 597 grab number of \; samples of the \; selected audio
file;
#X text 167 525 grab frequency \; for phasor \; according to the \;
selected audio \; file;
#X text 757 634 build array name \; containing the \; selected index
\; so the tabread object \; knows which array \; to read from.;
#X text 40 527 stop playing;
#X text 238 802 AUDIO OUTPUT;
#X text 426 741 adjust volume \; (from fader 1);
#X text 590 8 13th April 2018 \; This patch plays the audio files in
the \; SamplePack2 folder. The desired audio file \; is selected by
an index. The index can be \; changed by the 2nd and 3rd inlet (e.g.
by \; the computer's keys or hid input). A bang on the first inlet
plays the selected \; audio file. \; \; OUTLETS: Audio output for dac
object (left and right);
#X obj 64 17 inlet playButton2;
#X obj 267 19 inlet selectUp2;
#X obj 381 20 inlet selectDown2;
#X obj 414 111 r initIndexBang2;
#X obj 399 367 r pb1_1_2;
#X obj 571 603 makefilename SampleArray2_%d;
#X obj 377 745 r vol2;
#X obj 362 791 outlet~ toDacLeft2;
#X obj 512 792 outlet~ toDacRight2;
#X obj 385 556 r listNumberOfSamplesOfEachAudioFile2;
#X obj 395 576 r pb1_2_2;
#X obj 340 193 print SP2>>First Sample Reached;
#X obj 267 217 print SP2>>Last Sample Reached;
#N canvas 25 58 553 615 My_RSP_IndexGenerator2 0;
#X obj 129 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 163 134 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 129 222 moses;
#X obj 201 205 / 2;
#X msg 129 173 1;
#X obj 129 283 +;
#X obj 159 283 f;
#X obj 322 312 clip;
#X obj 305 143 t b b;
#X obj 305 118 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 332 239 1;
#X obj 156 253 -;
#X obj 163 173 f;
#X obj 193 173 - 1;
#X floatatom 223 393 5 0 0 0 - - -;
#X obj 223 371 <= 0;
#X obj 129 349 >;
#X obj 129 471 spigot;
#X obj 129 447 f;
#X obj 129 374 t b f;
#X obj 223 433 t b f;
#X obj 223 454 f;
#X obj 223 480 spigot;
#X obj 305 188 f;
#X floatatom 332 189 5 0 0 0 - - -;
#X text 590 36 This patch puts out the desired index number which controls
the desired audiosample to be played. \; inlets: \; left: increase
index \; middle: decrease index \; right: init the patch with the max
number of audio files \; Before the patch is init-banged \, it has
to receive "AmountOfAudioSamplesInSP1 to know the max number the index
is allowed to be \; outlets \; left: bang when the maximum index is
reached \; middle: bang when the minimum index is reached \; right:
current index;
#X text 426 384 output the index;
#X text 403 527 output warning bang (first index reached);
#X text 302 550 output warning bang (last index reached);
#X obj 129 36 inlet increaseIndexSP2;
#X obj 163 62 inlet decreaseIndexSP2;
#X obj 305 89 inlet bangToInitWithNumberOfIndexes2;
#X obj 129 549 outlet LastSampleReachedSP2;
#X obj 223 523 outlet FirstSampleReachedSP2;
#X obj 322 386 outlet SP2_Index;
#X obj 320 166 r AmountOfAudioFilesInSP2;
#X obj 305 212 s maxNoOfSamples2;
#X obj 372 289 r maxNoOfSamples2;
#X obj 259 345 s sP2Index;
#X obj 193 152 r maxNoOfSamples2;
#X obj 171 230 r maxNoOfSamples2;
#X obj 144 325 r maxNoOfSamples2;
#X obj 278 437 r sP2Index;
#X obj 144 414 r sP2Index;
#X text 175 108 decrease \; SamplePack2Index;
#X text 11 104 increase \; SamplePack2Index;
#X connect 0 0 4 0;
#X connect 1 0 12 0;
#X connect 2 0 5 0;
#X connect 2 1 11 0;
#X connect 3 0 2 1;
#X connect 4 0 2 0;
#X connect 5 0 7 0;
#X connect 5 0 15 0;
#X connect 5 0 16 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X connect 7 0 34 0;
#X connect 7 0 38 0;
#X connect 8 0 23 0;
#X connect 8 1 10 0;
#X connect 9 0 8 0;
#X connect 10 0 7 1;
#X connect 11 0 5 0;
#X connect 12 0 2 0;
#X connect 13 0 12 1;
#X connect 14 0 20 0;
#X connect 15 0 14 0;
#X connect 16 0 19 0;
#X connect 17 0 32 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X connect 19 1 17 1;
#X connect 20 0 21 0;
#X connect 20 1 22 1;
#X connect 21 0 22 0;
#X connect 22 0 33 0;
#X connect 23 0 3 0;
#X connect 23 0 36 0;
#X connect 29 0 0 0;
#X connect 30 0 1 0;
#X connect 31 0 9 0;
#X connect 35 0 23 1;
#X connect 35 0 24 0;
#X connect 37 0 7 2;
#X connect 39 0 13 0;
#X connect 40 0 11 1;
#X connect 41 0 16 1;
#X connect 42 0 21 1;
#X connect 43 0 18 1;
#X restore 267 143 pd My_RSP_IndexGenerator2;
#X floatatom 451 160 5 0 0 0 - - -;
#X obj 265 465 r listValuesForPhasor2;
#X obj 201 484 r pb1_3_2;
#X obj 115 140 s pb1_1_2;
#X obj 98 163 s pb1_2_2;
#X obj 81 198 s pb1_3_2;
#X obj 81 552 r stopAll;
#X obj 144 713 snapshot~;
#X obj 144 759 /;
#X text -51 736 divide by the number of \; samples of the currently
\; playing audio file to make the \; position a value between 0 and
1;
#X text -49 797 output on the right outlet \; if the end is almost
reached.;
#X text -12 846 send a wish for playback \; which will ONLY BE ACKNOWLEGDED
\; by the metronome:);
#X text -52 681 get the metronome's 16th notes;
#X text -50 703 get position of the \; currently playing sample;
#X text -29 658 ***SYNCING PLAYBACK TO METRONOME***;
#X floatatom 220 907 5 0 0 0 - - -;
#X obj 220 934 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 263 847 0;
#X obj 201 847 spigot 1;
#X obj 201 877 t b f b;
#X msg 201 1003 1;
#X text 313 881 here we only let the first value \; of the moses' right
output come trough;
#X obj 246 820 r openSpigot2;
#X obj 201 1027 s openSpigot2;
#X obj 276 112 r indexInit;
#X text 275 66 select first \; sample after \; loading the patch;
#N canvas 328 282 450 300 My_RSP_LedAlert 0;
#X text 199 46 this patch toggles the blue led \; on gpio24 to show
that the first or last \; sample is reached.;
#X obj 71 150 wiringPi_gpio 24 0 0;
#X msg 71 119 1;
#X obj 44 85 t b b;
#X msg 44 217 0;
#X obj 44 186 delay 100;
#X obj 44 30 inlet alertBang;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 3 1 2 0;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 6 0 3 0;
#X restore 219 239 pd My_RSP_LedAlert;
#N canvas 145 79 1015 572 My_RSP_Looping_Index_Handler2 0;
#X text 603 28 29th August 2018 This subpatch receives a bang on its
inlet \, when the currently played sample has reached its end. This
subpatch then checks if the currently playing sample is still selected
by the user or not. If not \, there has to be sent an index correction
to the zl nth objects of the parent patch ("RSP_SelectAndPlayEngine")
in order to loop the currently playing sample;
#X obj 131 301 ==;
#X floatatom 146 278 5 0 0 0 - - -;
#X floatatom 146 158 5 0 0 0 - - -;
#X obj 131 186 f;
#X floatatom 131 328 5 0 0 0 - - -;
#X obj 146 240 t f f;
#X obj 131 410 f;
#X obj 131 356 moses 1;
#X text 243 233 if the currentSelectedIndex is not equal to the lastPlayedIndex
\, then moses receives a 0 and bangs at its left outlet. In this case
we have to send indexCorrectionforLooping (==the lastPlayedIndex) in
front of the zl nth objects above. By this \, the sample that is currently
playing is looped when it has reached its end. Otherwise the system
would always play the currently selected sample \, which might be different
from the currently played sample because the user might have chosen
another sample in the meantime \;;
#X floatatom 202 466 5 0 0 0 - - -;
#X obj 170 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 131 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 223 406 f;
#X floatatom 251 406 5 0 0 0 - - -;
#X obj 131 31 inlet currentSampleHasReachedItsEnd2;
#X obj 146 132 r currentSelectedIndexSP2;
#X obj 146 209 r lastIndexPlayedSP2;
#X obj 238 382 r currentSelectedIndexSP2;
#X obj 223 428 print SP2: loopingFire2 playing currently selected sample
;
#X obj 203 489 s indexCorrectionForLoopingSP2;
#X obj 150 513 s loopingFire2;
#X text 436 242 comment;
#X obj 131 541 print SP2: loopingFire2 with index correction to;
#X obj 170 404 t b b;
#X obj 131 442 t f b f;
#X connect 1 0 5 0;
#X connect 2 0 1 1;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X connect 5 0 8 0;
#X connect 6 0 2 0;
#X connect 6 1 7 1;
#X connect 7 0 25 0;
#X connect 8 0 12 0;
#X connect 8 1 11 0;
#X connect 11 0 24 0;
#X connect 12 0 7 0;
#X connect 13 0 19 0;
#X connect 15 0 4 0;
#X connect 16 0 3 0;
#X connect 17 0 6 0;
#X connect 18 0 13 1;
#X connect 18 0 14 0;
#X connect 24 0 13 0;
#X connect 24 1 21 0;
#X connect 25 0 23 0;
#X connect 25 1 21 0;
#X connect 25 2 10 0;
#X connect 25 2 20 0;
#X restore 220 956 pd My_RSP_Looping_Index_Handler2;
#X floatatom 473 398 5 0 0 0 - - -;
#X obj 473 372 r indexCorrectionForLoopingSP2;
#X obj 469 297 f;
#X text 503 298 store current selected index;
#X text 571 313 send currentSelectedIndex to subpatch "Looping_Index_Handler"
and to parent patch;
#X obj 469 259 r updateZlnthObjectsBang2;
#X obj 414 323 s currentSelectedIndexSP2;
#X obj 414 259 t f f;
#X obj 144 686 r metroHits;
#X obj 144 805 moses 0.98;
#X obj 201 978 delay 2000;
#X obj 399 416 t f f f;
#X obj 64 107 t b b b b;
#X connect 0 0 2 0;
#X connect 1 0 3 1;
#X connect 1 0 13 0;
#X connect 2 0 3 0;
#X connect 3 0 5 0;
#X connect 3 0 10 0;
#X connect 3 0 46 0;
#X connect 4 0 33 0;
#X connect 5 0 4 0;
#X connect 6 0 5 0;
#X connect 7 0 78 0;
#X connect 8 0 2 1;
#X connect 9 0 2 0;
#X connect 10 0 12 0;
#X connect 11 0 10 0;
#X connect 12 0 32 0;
#X connect 13 0 47 1;
#X connect 25 0 79 0;
#X connect 26 0 38 0;
#X connect 27 0 38 1;
#X connect 28 0 38 2;
#X connect 29 0 7 0;
#X connect 30 0 6 0;
#X connect 30 0 11 0;
#X connect 31 0 12 1;
#X connect 31 0 4 1;
#X connect 34 0 1 0;
#X connect 35 0 1 0;
#X connect 38 0 37 0;
#X connect 38 0 65 0;
#X connect 38 1 36 0;
#X connect 38 1 65 0;
#X connect 38 2 39 0;
#X connect 38 2 74 0;
#X connect 40 0 0 0;
#X connect 41 0 0 0;
#X connect 45 0 9 0;
#X connect 46 0 47 0;
#X connect 47 0 76 0;
#X connect 54 0 55 0;
#X connect 55 0 66 0;
#X connect 56 0 57 1;
#X connect 57 0 58 0;
#X connect 58 0 77 0;
#X connect 58 1 54 0;
#X connect 58 2 56 0;
#X connect 59 0 62 0;
#X connect 61 0 57 1;
#X connect 63 0 38 0;
#X connect 68 0 67 0;
#X connect 68 0 7 1;
#X connect 69 0 7 1;
#X connect 72 0 69 0;
#X connect 74 0 73 0;
#X connect 74 1 69 1;
#X connect 75 0 46 0;
#X connect 76 1 57 0;
#X connect 77 0 59 0;
#X connect 78 0 0 1;
#X connect 78 1 1 1;
#X connect 78 2 30 0;
#X connect 79 0 8 0;
#X connect 79 1 44 0;
#X connect 79 2 43 0;
#X connect 79 3 42 0;
#X restore 392 484 pd My_RSP_SelectAndPlayEngine2;
#X obj 392 534 dac~ 1 2;
#X obj 392 534 dac~ 1 2;
#X obj 684 21 inlet metronomeInlet3;
#X obj 772 419 r sU3;
#X obj 861 417 r sD3;
#N canvas 0 51 1280 643 My_RSP_TimeHandler3 0;
#X msg 65 115 1;
#X obj 50 178 f;
#X msg 81 178 0;
#X obj 50 204 moses 1;
#X text 469 136 This patch handles the humans \; wish to play his selected
audio \; file \, so that playback is only \; done when the metronom
has reached \; the first beat \; (just like in ableton live);
#X obj 81 155 r initBang;
#X obj 50 37 inlet myMetronomeFirstHit1_3;
#X obj 239 39 inlet myHumanDesiresPlayingSaver3;
#X obj 89 330 outlet myPermissionToPlay3;
#X obj 479 41 inlet myCurrentSampleDesiresLooping3;
#X text 468 210 The third inlet is for looping the sample that is currently
played.;
#X text 99 284 here we distinguish between the user pressing the playbutton
and the internal looping mechanism.;
#N canvas 371 298 601 288 My_RSP_PlaywishDistinguisher3 0;
#X obj 54 96 bang;
#X obj 54 123 f;
#X msg 188 90 0;
#X msg 360 86 1;
#X obj 54 154 moses 1;
#X obj 54 175 t b b;
#X obj 54 44 inlet myReadyToPlay3;
#X obj 188 44 inlet myHumanIdentifier3;
#X obj 360 43 inlet myLoopingIdentifier3;
#X obj 54 226 s currentPlayingSampleNameBang3;
#X obj 325 225 outlet myPlaybackBang3;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 1 1;
#X connect 4 0 5 0;
#X connect 4 1 10 0;
#X connect 5 0 9 0;
#X connect 5 1 10 0;
#X connect 6 0 0 0;
#X connect 7 0 2 0;
#X connect 8 0 3 0;
#X restore 89 261 pd My_RSP_PlaywishDistinguisher3;
#X obj 239 66 t b b;
#X obj 479 62 t b b;
#X connect 0 0 1 1;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 1 12 0;
#X connect 5 0 2 0;
#X connect 6 0 1 0;
#X connect 7 0 13 0;
#X connect 9 0 14 0;
#X connect 12 0 8 0;
#X connect 13 0 0 0;
#X connect 13 1 12 1;
#X connect 14 0 0 0;
#X connect 14 1 12 2;
#X restore 684 386 pd My_RSP_TimeHandler3;
#N canvas 34 63 859 559 My_RSP_SelectAndPlayEngine3 0;
#X obj 265 541 zl nth;
#X obj 385 628 zl nth;
#X obj 265 614 phasor~;
#X obj 266 654 *~;
#X obj 399 404 t f f f;
#X obj 511 792 *~;
#X obj 511 738 tabread4~ \$1;
#X msg 662 649 set \$1_right;
#X obj 399 379 f;
#X obj 64 107 t b b b b;
#X msg 64 207 0;
#X obj 363 739 tabread4~ \$1;
#X msg 571 648 set \$1_left;
#X obj 362 791 *~;
#X floatatom 385 657 10 0 0 0 - - -;
#X text 464 142 generate an index between 1 and max number of audio
files \; in folder "samplepack1" to select one audio file to play.
;
#X text 465 505 pass the index to the zl nth objects \; to determine
which values should be \; grabbed out of the value lists the next \;
time the zl nth objects are banged by the \; "playbang (pb1_n).;
#X text 175 132 pb = playbang;
#X text 91 200 start playing \; the audio file;
#X text 451 617 grab number of \; samples of the \; selected audio
file;
#X text 167 545 grab frequency \; for phasor \; according to the \;
selected audio \; file;
#X text 757 654 build array name \; containing the \; selected index
\; so the tabread object \; knows which array \; to read from.;
#X text 447 840 AUDIO OUTPUT;
#X text 426 761 adjust volume \; (from fader 1);
#X text 590 8 13th April 2018 \; This patch plays the audio files in
the \; SamplePack2 folder. The desired audio file \; is selected by
an index. The index can be \; changed by the 2nd and 3rd inlet (e.g.
by \; the computer's keys or hid input). A bang on the first inlet
plays the selected \; audio file. \; \; OUTLETS: Audio output for dac
object (left and right);
#X floatatom 451 160 5 0 0 0 - - -;
#X obj 64 17 inlet playButton3;
#X obj 267 19 inlet selectUp3;
#X obj 381 20 inlet selectDown3;
#X obj 115 130 s pb1_1_3;
#X obj 98 153 s pb1_2_3;
#X obj 81 177 s pb1_3_3;
#X obj 414 111 r initIndexBang3;
#X obj 340 193 print SP3>>First Sample Reached;
#X obj 267 217 print SP3>>Last Sample Reached;
#X obj 399 357 r pb1_1_3;
#X obj 265 485 r listValuesForPhasor3;
#X obj 201 513 r pb1_3_3;
#X obj 385 576 r listNumberOfSamplesOfEachAudioFile3;
#X obj 395 596 r pb1_2_3;
#X obj 571 623 makefilename SampleArray3_%d;
#X obj 377 765 r vol3;
#X obj 362 811 outlet~ toDacLeft3;
#X obj 511 814 outlet~ toDacRight3;
#N canvas 76 99 553 615 My_RSP_IndexGenerator3 0;
#X obj 129 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 163 134 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 129 222 moses;
#X obj 201 205 / 2;
#X msg 129 173 1;
#X obj 129 283 +;
#X obj 159 283 f;
#X obj 322 312 clip;
#X obj 305 143 t b b;
#X obj 305 118 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 332 239 1;
#X obj 156 253 -;
#X obj 163 173 f;
#X obj 193 173 - 1;
#X floatatom 223 393 5 0 0 0 - - -;
#X obj 223 371 <= 0;
#X obj 129 349 >;
#X obj 129 471 spigot;
#X obj 129 447 f;
#X obj 129 374 t b f;
#X obj 223 433 t b f;
#X obj 223 454 f;
#X obj 223 480 spigot;
#X obj 305 188 f;
#X floatatom 332 189 5 0 0 0 - - -;
#X text 590 36 This patch puts out the desired index number which controls
the desired audiosample to be played. \; inlets: \; left: increase
index \; middle: decrease index \; right: init the patch with the max
number of audio files \; Before the patch is init-banged \, it has
to receive "AmountOfAudioSamplesInSP1 to know the max number the index
is allowed to be \; outlets \; left: bang when the maximum index is
reached \; middle: bang when the minimum index is reached \; right:
current index;
#X text 426 384 output the index;
#X text 403 527 output warning bang (first index reached);
#X text 302 550 output warning bang (last index reached);
#X obj 129 36 inlet increaseIndexSP3;
#X obj 163 62 inlet decreaseIndexSP3;
#X obj 305 89 inlet bangToInitWithNumberOfIndexes3;
#X text 175 108 decrease \; SamplePack3Index;
#X text 11 104 increase \; SamplePack3Index;
#X obj 193 152 r maxNoOfSamples3;
#X obj 320 166 r AmountOfAudioFilesInSP3;
#X obj 171 230 r maxNoOfSamples3;
#X obj 305 212 s maxNoOfSamples3;
#X obj 144 325 r maxNoOfSamples3;
#X obj 372 289 r maxNoOfSamples3;
#X obj 259 345 s sP3Index;
#X obj 322 386 outlet SP3_Index;
#X obj 144 414 r sP3Index;
#X obj 278 437 r sP3Index;
#X obj 223 523 outlet FirstSampleReachedSP3;
#X obj 129 549 outlet LastSampleReachedSP3;
#X connect 0 0 4 0;
#X connect 1 0 12 0;
#X connect 2 0 5 0;
#X connect 2 1 11 0;
#X connect 3 0 2 1;
#X connect 4 0 2 0;
#X connect 5 0 7 0;
#X connect 5 0 15 0;
#X connect 5 0 16 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X connect 7 0 40 0;
#X connect 7 0 41 0;
#X connect 8 0 23 0;
#X connect 8 1 10 0;
#X connect 9 0 8 0;
#X connect 10 0 7 1;
#X connect 11 0 5 0;
#X connect 12 0 2 0;
#X connect 13 0 12 1;
#X connect 14 0 20 0;
#X connect 15 0 14 0;
#X connect 16 0 19 0;
#X connect 17 0 45 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X connect 19 1 17 1;
#X connect 20 0 21 0;
#X connect 20 1 22 1;
#X connect 21 0 22 0;
#X connect 22 0 44 0;
#X connect 23 0 3 0;
#X connect 23 0 37 0;
#X connect 29 0 0 0;
#X connect 30 0 1 0;
#X connect 31 0 9 0;
#X connect 34 0 13 0;
#X connect 35 0 23 1;
#X connect 35 0 24 0;
#X connect 36 0 11 1;
#X connect 38 0 16 1;
#X connect 39 0 7 2;
#X connect 42 0 18 1;
#X connect 43 0 21 1;
#X restore 267 143 pd My_RSP_IndexGenerator3;
#X msg 91 597 0;
#X text 50 547 stop playing;
#X obj 91 572 r stopAll;
#X obj 154 716 r metroHits;
#X obj 154 743 snapshot~;
#X obj 154 789 /;
#X text -41 766 divide by the number of \; samples of the currently
\; playing audio file to make the \; position a value between 0 and
1;
#X text -39 827 output on the right outlet \; if the end is almost
reached.;
#X text -2 876 send a wish for playback \; which will ONLY BE ACKNOWLEGDED
\; by the metronome:);
#X text -42 711 get the metronome's 16th notes;
#X text -40 733 get position of the \; currently playing sample;
#X text -19 688 ***SYNCING PLAYBACK TO METRONOME***;
#X floatatom 230 937 5 0 0 0 - - -;
#X obj 230 964 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 273 877 0;
#X obj 211 877 spigot 1;
#X obj 211 907 t b f b;
#X msg 211 1033 1;
#X text 273 903 here we only let the first value \; of the moses' right
output come trough;
#X obj 256 850 r openSpigot3;
#X obj 211 1057 s openSpigot3;
#X obj 211 1008 delay 2000;
#X obj 275 109 r indexInit;
#X text 275 64 select first \; sample after \; loading the patch;
#N canvas 329 283 450 300 My_RSP_LedAlert 0;
#X text 199 46 this patch toggles the blue led \; on gpio24 to show
that the first or last \; sample is reached.;
#X obj 71 150 wiringPi_gpio 24 0 0;
#X msg 71 119 1;
#X obj 44 85 t b b;
#X msg 44 217 0;
#X obj 44 186 delay 100;
#X obj 44 30 inlet alertBang;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 3 1 2 0;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 6 0 3 0;
#X restore 219 240 pd My_RSP_LedAlert;
#N canvas 114 87 1028 575 My_RSP_Looping_Index_Handler3 0;
#X text 603 28 29th August 2018 This subpatch receives a bang on its
inlet \, when the currently played sample has reached its end. This
subpatch then checks if the currently playing sample is still selected
by the user or not. If not \, there has to be sent an index correction
to the zl nth objects of the parent patch ("RSP_SelectAndPlayEngine")
in order to loop the currently playing sample;
#X obj 131 301 ==;
#X floatatom 146 278 5 0 0 0 - - -;
#X floatatom 146 158 5 0 0 0 - - -;
#X obj 131 186 f;
#X floatatom 131 328 5 0 0 0 - - -;
#X obj 146 250 t f f;
#X obj 131 410 f;
#X obj 131 356 moses 1;
#X text 243 233 if the currentSelectedIndex is not equal to the lastPlayedIndex
\, then moses receives a 0 and bangs at its left outlet. In this case
we have to send indexCorrectionforLooping (==the lastPlayedIndex) in
front of the zl nth objects above. By this \, the sample that is currently
playing is looped when it has reached its end. Otherwise the system
would always play the currently selected sample \, which might be different
from the currently played sample because the user might have chosen
another sample in the meantime \;;
#X floatatom 212 466 5 0 0 0 - - -;
#X obj 170 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 131 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 263 437 f;
#X floatatom 290 437 5 0 0 0 - - -;
#X obj 131 31 inlet currentSampleHasReachedItsEnd3;
#X obj 146 132 r currentSelectedIndexSP3;
#X obj 146 209 r lastIndexPlayedSP3;
#X obj 278 413 r currentSelectedIndexSP3;
#X obj 263 459 print SP3: loopingFire3 playing currently selected sample
;
#X obj 213 489 s indexCorrectionForLoopingSP3;
#X obj 150 511 s loopingFire3;
#X obj 131 541 print SP3: loopingFire3 with index correction to;
#X floatatom 146 230 5 0 0 0 - - -;
#X text 436 242 comment;
#X obj 170 406 t b b;
#X obj 131 442 t f b f;
#X connect 1 0 5 0;
#X connect 2 0 1 1;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X connect 5 0 8 0;
#X connect 6 0 2 0;
#X connect 6 1 7 1;
#X connect 7 0 26 0;
#X connect 8 0 12 0;
#X connect 8 1 11 0;
#X connect 11 0 25 0;
#X connect 12 0 7 0;
#X connect 13 0 19 0;
#X connect 15 0 4 0;
#X connect 16 0 3 0;
#X connect 17 0 23 0;
#X connect 18 0 13 1;
#X connect 18 0 14 0;
#X connect 23 0 6 0;
#X connect 25 0 13 0;
#X connect 25 1 21 0;
#X connect 26 0 22 0;
#X connect 26 1 21 0;
#X connect 26 2 10 0;
#X connect 26 2 20 0;
#X restore 230 984 pd My_RSP_Looping_Index_Handler3;
#X floatatom 473 385 5 0 0 0 - - -;
#X obj 473 362 r indexCorrectionForLoopingSP3;
#X obj 469 288 f;
#X text 503 289 store current selected index;
#X text 572 302 send currentSelectedIndex to subpatch "Looping_Index_Handler"
and to parent patch;
#X obj 469 250 r updateZlnthObjectsBang3;
#X obj 414 309 s currentSelectedIndexSP3;
#X obj 572 207 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 414 250 t f f;
#X obj 154 835 moses 0.98;
#X connect 0 0 2 0;
#X connect 1 0 3 1;
#X connect 1 0 14 0;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 3 0 11 0;
#X connect 3 0 49 0;
#X connect 4 0 0 1;
#X connect 4 1 1 1;
#X connect 4 2 40 0;
#X connect 5 0 43 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 8 0 4 0;
#X connect 9 0 10 0;
#X connect 9 1 31 0;
#X connect 9 2 30 0;
#X connect 9 3 29 0;
#X connect 10 0 2 1;
#X connect 11 0 13 0;
#X connect 12 0 11 0;
#X connect 13 0 42 0;
#X connect 14 0 50 1;
#X connect 26 0 9 0;
#X connect 27 0 44 0;
#X connect 28 0 44 1;
#X connect 32 0 44 2;
#X connect 35 0 8 0;
#X connect 36 0 0 0;
#X connect 37 0 0 0;
#X connect 38 0 1 0;
#X connect 39 0 1 0;
#X connect 40 0 7 0;
#X connect 40 0 12 0;
#X connect 41 0 13 1;
#X connect 41 0 5 1;
#X connect 44 0 34 0;
#X connect 44 0 69 0;
#X connect 44 1 33 0;
#X connect 44 1 69 0;
#X connect 44 2 25 0;
#X connect 44 2 78 0;
#X connect 44 2 79 0;
#X connect 45 0 2 0;
#X connect 47 0 45 0;
#X connect 48 0 49 0;
#X connect 49 0 50 0;
#X connect 50 0 80 0;
#X connect 57 0 58 0;
#X connect 58 0 70 0;
#X connect 59 0 60 1;
#X connect 60 0 61 0;
#X connect 61 0 66 0;
#X connect 61 1 57 0;
#X connect 61 2 59 0;
#X connect 62 0 65 0;
#X connect 64 0 60 1;
#X connect 66 0 62 0;
#X connect 67 0 44 0;
#X connect 72 0 71 0;
#X connect 72 0 8 1;
#X connect 73 0 8 1;
#X connect 76 0 73 0;
#X connect 79 0 77 0;
#X connect 79 1 73 1;
#X connect 80 1 60 0;
#X restore 684 442 pd My_RSP_SelectAndPlayEngine3;
#X obj 684 511 dac~ 1 2;
#X obj 684 511 dac~ 1 2;
#X obj 987 520 dac~ 1 2;
#X obj 1075 439 r sU4;
#X obj 1164 438 r sD4;
#N canvas 29 70 1170 612 My_RSP_SelectAndPlayEngine4 0;
#X obj 265 541 zl nth;
#X obj 385 628 zl nth;
#X obj 265 614 phasor~;
#X obj 266 654 *~;
#X obj 399 404 t f f f;
#X obj 511 792 *~;
#X obj 511 738 tabread4~ \$1;
#X msg 662 649 set \$1_right;
#X obj 399 379 f;
#X obj 64 107 t b b b b;
#X msg 64 207 0;
#X obj 363 739 tabread4~ \$1;
#X msg 571 648 set \$1_left;
#X obj 362 791 *~;
#X floatatom 385 654 10 0 0 0 - - -;
#X text 464 142 generate an index between 1 and max number of audio
files \; in folder "samplepack1" to select one audio file to play.
;
#X text 497 453 pass the index to the zl nth objects \; to determine
which values should be \; grabbed out of the value lists the next \;
time the zl nth objects are banged by the \; "playbang (pb1_n).;
#X text 175 132 pb = playbang;
#X text 91 200 start playing \; the audio file;
#X text 451 617 grab number of \; samples of the \; selected audio
file;
#X text 167 545 grab frequency \; for phasor \; according to the \;
selected audio \; file;
#X text 757 654 build array name \; containing the \; selected index
\; so the tabread object \; knows which array \; to read from.;
#X text 426 761 adjust volume \; (from fader 1);
#X text 590 8 13th April 2018 \; This patch plays the audio files in
the \; SamplePack2 folder. The desired audio file \; is selected by
an index. The index can be \; changed by the 2nd and 3rd inlet (e.g.
by \; the computer's keys or hid input). A bang on the first inlet
plays the selected \; audio file. \; \; OUTLETS: Audio output for dac
object (left and right);
#X floatatom 451 160 5 0 0 0 - - -;
#X obj 64 7 inlet playButton4;
#X obj 267 9 inlet selectUp4;
#X obj 381 10 inlet selectDown4;
#X obj 414 111 r initIndexBang4;
#X obj 115 130 s pb1_1_4;
#X obj 98 153 s pb1_2_4;
#X obj 81 177 s pb1_3_4;
#N canvas 75 98 553 615 My_RSP_IndexGenerator4 0;
#X obj 129 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 163 134 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 129 222 moses;
#X obj 201 205 / 2;
#X msg 129 173 1;
#X obj 129 283 +;
#X obj 159 283 f;
#X obj 322 312 clip;
#X obj 305 143 t b b;
#X obj 305 118 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 332 239 1;
#X obj 156 253 -;
#X obj 163 173 f;
#X obj 193 173 - 1;
#X floatatom 223 393 5 0 0 0 - - -;
#X obj 223 371 <= 0;
#X obj 129 349 >;
#X obj 129 471 spigot;
#X obj 129 447 f;
#X obj 129 374 t b f;
#X obj 223 433 t b f;
#X obj 223 454 f;
#X obj 223 480 spigot;
#X obj 305 188 f;
#X floatatom 332 189 5 0 0 0 - - -;
#X text 590 36 This patch puts out the desired index number which controls
the desired audiosample to be played. \; inlets: \; left: increase
index \; middle: decrease index \; right: init the patch with the max
number of audio files \; Before the patch is init-banged \, it has
to receive "AmountOfAudioSamplesInSP1 to know the max number the index
is allowed to be \; outlets \; left: bang when the maximum index is
reached \; middle: bang when the minimum index is reached \; right:
current index;
#X text 426 384 output the index;
#X text 403 527 output warning bang (first index reached);
#X text 302 550 output warning bang (last index reached);
#X text 11 104 increase \; SamplePack3Index;
#X obj 129 36 inlet increaseIndexSP4;
#X obj 163 62 inlet decreaseIndexSP4;
#X obj 305 89 inlet bangToInitWithNumberOfIndexes4;
#X text 175 108 decrease \; SamplePack4Index;
#X obj 193 152 r maxNoOfSamples4;
#X obj 320 166 r AmountOfAudioFilesInSP4;
#X obj 305 212 s maxNoOfSamples4;
#X obj 171 230 r maxNoOfSamples4;
#X obj 372 289 r maxNoOfSamples4;
#X obj 144 325 r maxNoOfSamples4;
#X obj 259 345 s sP4Index;
#X obj 322 386 outlet SP4_Index;
#X obj 144 414 r sP4Index;
#X obj 278 437 r sP4Index;
#X obj 223 523 outlet FirstSampleReachedSP4;
#X obj 129 549 outlet LastSampleReachedSP4;
#X connect 0 0 4 0;
#X connect 1 0 12 0;
#X connect 2 0 5 0;
#X connect 2 1 11 0;
#X connect 3 0 2 1;
#X connect 4 0 2 0;
#X connect 5 0 7 0;
#X connect 5 0 15 0;
#X connect 5 0 16 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X connect 7 0 40 0;
#X connect 7 0 41 0;
#X connect 8 0 23 0;
#X connect 8 1 10 0;
#X connect 9 0 8 0;
#X connect 10 0 7 1;
#X connect 11 0 5 0;
#X connect 12 0 2 0;
#X connect 13 0 12 1;
#X connect 14 0 20 0;
#X connect 15 0 14 0;
#X connect 16 0 19 0;
#X connect 17 0 45 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X connect 19 1 17 1;
#X connect 20 0 21 0;
#X connect 20 1 22 1;
#X connect 21 0 22 0;
#X connect 22 0 44 0;
#X connect 23 0 3 0;
#X connect 23 0 36 0;
#X connect 30 0 0 0;
#X connect 31 0 1 0;
#X connect 32 0 9 0;
#X connect 34 0 13 0;
#X connect 35 0 23 1;
#X connect 35 0 24 0;
#X connect 37 0 11 1;
#X connect 38 0 7 2;
#X connect 39 0 16 1;
#X connect 42 0 18 1;
#X connect 43 0 21 1;
#X restore 267 143 pd My_RSP_IndexGenerator4;
#X obj 340 193 print SP4>>First Sample Reached;
#X obj 267 217 print SP4>>Last Sample Reached;
#X obj 399 353 r pb1_1_4;
#X obj 265 505 r listValuesForPhasor4;
#X obj 211 524 r pb1_3_4;
#X obj 385 576 r listNumberOfSamplesOfEachAudioFile4;
#X obj 395 596 r pb1_2_4;
#X obj 571 623 makefilename SampleArray4_%d;
#X obj 377 765 r vol4;
#X obj 362 811 outlet~ toDacLeft4;
#X obj 511 814 outlet~ toDacRight4;
#X msg 87 597 0;
#X text 46 547 stop playing;
#X obj 87 572 r stopAll;
#X text 458 843 AUDIO OUTPUT;
#X obj 164 726 r metroHits;
#X obj 164 753 snapshot~;
#X obj 164 799 /;
#X text -31 776 divide by the number of \; samples of the currently
\; playing audio file to make the \; position a value between 0 and
1;
#X text -29 837 output on the right outlet \; if the end is almost
reached.;
#X text 8 886 send a wish for playback \; which will ONLY BE ACKNOWLEGDED
\; by the metronome:);
#X text -32 721 get the metronome's 16th notes;
#X text -30 743 get position of the \; currently playing sample;
#X text -9 698 ***SYNCING PLAYBACK TO METRONOME***;
#X floatatom 240 947 5 0 0 0 - - -;
#X obj 240 974 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 283 887 0;
#X obj 221 887 spigot 1;
#X obj 221 917 t b f b;
#X msg 221 1043 1;
#X text 283 913 here we only let the first value \; of the moses' right
output come trough;
#X obj 266 860 r openSpigot4;
#X obj 221 1067 s openSpigot4;
#X obj 221 1018 delay 2000;
#X obj 275 106 r indexInit;
#X text 273 57 select first \; sample after \; loading the patch;
#N canvas 328 282 450 300 My_RSP_LedAlert 0;
#X text 199 46 this patch toggles the blue led \; on gpio24 to show
that the first or last \; sample is reached.;
#X obj 71 150 wiringPi_gpio 24 0 0;
#X msg 71 119 1;
#X obj 44 85 t b b;
#X msg 44 217 0;
#X obj 44 186 delay 100;
#X obj 44 30 inlet alertBang;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 3 1 2 0;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 6 0 3 0;
#X restore 217 239 pd My_RSP_LedAlert;
#N canvas 66 72 1015 572 My_RSP_Looping_Index_Handler4 0;
#X text 603 28 29th August 2018 This subpatch receives a bang on its
inlet \, when the currently played sample has reached its end. This
subpatch then checks if the currently playing sample is still selected
by the user or not. If not \, there has to be sent an index correction
to the zl nth objects of the parent patch ("RSP_SelectAndPlayEngine")
in order to loop the currently playing sample;
#X obj 131 301 ==;
#X floatatom 146 278 5 0 0 0 - - -;
#X floatatom 146 158 5 0 0 0 - - -;
#X obj 131 186 f;
#X floatatom 131 328 5 0 0 0 - - -;
#X obj 146 240 t f f;
#X obj 131 410 f;
#X obj 131 356 moses 1;
#X text 259 236 if the currentSelectedIndex is not equal to the lastPlayedIndex
\, then moses receives a 0 and bangs at its left outlet. In this case
we have to send indexCorrectionforLooping (==the lastPlayedIndex) in
front of the zl nth objects above. By this \, the sample that is currently
playing is looped when it has reached its end. Otherwise the system
would always play the currently selected sample \, which might be different
from the currently played sample because the user might have chosen
another sample in the meantime \;;
#X floatatom 192 466 5 0 0 0 - - -;
#X obj 170 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 131 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 250 437 f;
#X floatatom 277 437 5 0 0 0 - - -;
#X obj 131 31 inlet currentSampleHasReachedItsEnd4;
#X obj 146 132 r currentSelectedIndexSP4;
#X obj 146 209 r lastIndexPlayedSP4;
#X obj 265 413 r currentSelectedIndexSP4;
#X obj 250 459 print SP4: loopingFire4 playing currently selected sample
;
#X obj 193 489 s indexCorrectionForLoopingSP4;
#X obj 150 514 s loopingFire4;
#X obj 131 541 print SP4: loopingFire4 with index correction to;
#X text 436 242 comment;
#X obj 170 404 t b b;
#X obj 131 442 t f b f;
#X connect 1 0 5 0;
#X connect 2 0 1 1;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X connect 5 0 8 0;
#X connect 6 0 2 0;
#X connect 6 1 7 1;
#X connect 7 0 25 0;
#X connect 8 0 12 0;
#X connect 8 1 11 0;
#X connect 11 0 24 0;
#X connect 12 0 7 0;
#X connect 13 0 19 0;
#X connect 15 0 4 0;
#X connect 16 0 3 0;
#X connect 17 0 6 0;
#X connect 18 0 13 1;
#X connect 18 0 14 0;
#X connect 24 0 13 0;
#X connect 24 1 21 0;
#X connect 25 0 22 0;
#X connect 25 1 21 0;
#X connect 25 2 10 0;
#X connect 25 2 20 0;
#X restore 240 996 pd My_RSP_Looping_Index_Handler4;
#X floatatom 541 388 5 0 0 0 - - -;
#X obj 541 362 r indexCorrectionForLoopingSP4;
#X obj 469 288 f;
#X text 503 289 store current selected index;
#X text 572 302 send currentSelectedIndex to subpatch "Looping_Index_Handler"
and to parent patch;
#X obj 414 250 t f f;
#X obj 469 250 r updateZlnthObjectsBang4;
#X obj 414 309 s currentSelectedIndexSP4;
#X obj 164 845 moses 0.98;
#X connect 0 0 2 0;
#X connect 1 0 3 1;
#X connect 1 0 14 0;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 3 0 11 0;
#X connect 3 0 49 0;
#X connect 4 0 0 1;
#X connect 4 1 1 1;
#X connect 4 2 40 0;
#X connect 5 0 43 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 8 0 4 0;
#X connect 9 0 10 0;
#X connect 9 1 31 0;
#X connect 9 2 30 0;
#X connect 9 3 29 0;
#X connect 10 0 2 1;
#X connect 11 0 13 0;
#X connect 12 0 11 0;
#X connect 13 0 42 0;
#X connect 14 0 50 1;
#X connect 25 0 9 0;
#X connect 26 0 32 0;
#X connect 27 0 32 1;
#X connect 28 0 32 2;
#X connect 32 0 34 0;
#X connect 32 0 69 0;
#X connect 32 1 33 0;
#X connect 32 1 69 0;
#X connect 32 2 24 0;
#X connect 32 2 76 0;
#X connect 35 0 8 0;
#X connect 36 0 0 0;
#X connect 37 0 0 0;
#X connect 38 0 1 0;
#X connect 39 0 1 0;
#X connect 40 0 7 0;
#X connect 40 0 12 0;
#X connect 41 0 13 1;
#X connect 41 0 5 1;
#X connect 44 0 2 0;
#X connect 46 0 44 0;
#X connect 48 0 49 0;
#X connect 49 0 50 0;
#X connect 50 0 79 0;
#X connect 57 0 58 0;
#X connect 58 0 70 0;
#X connect 59 0 60 1;
#X connect 60 0 61 0;
#X connect 61 0 66 0;
#X connect 61 1 57 0;
#X connect 61 2 59 0;
#X connect 62 0 65 0;
#X connect 64 0 60 1;
#X connect 66 0 62 0;
#X connect 67 0 32 0;
#X connect 72 0 71 0;
#X connect 72 0 8 1;
#X connect 73 0 8 1;
#X connect 76 0 78 0;
#X connect 76 1 73 1;
#X connect 77 0 73 0;
#X connect 79 1 60 0;
#X restore 987 462 pd My_RSP_SelectAndPlayEngine4;
#N canvas 0 51 1280 643 My_RSP_TimeHandler4 0;
#X msg 65 105 1;
#X obj 50 148 f;
#X msg 83 148 0;
#X obj 50 174 moses 1;
#X text 538 120 This patch handles the humans \; wish to play his selected
audio \; file \, so that playback is only \; done when the metronom
has reached \; the first beat \; (just like in ableton live);
#X obj 83 125 r initBang;
#X obj 50 37 inlet myMetronomeFirstHit1_4;
#X obj 239 37 inlet myHumanDesiresPlayingSaver4;
#X obj 89 285 outlet myPermissionToPlay4;
#X obj 472 37 inlet myCurrentSampleDesiresLooping4;
#X text 537 196 The third inlet is for looping the sample that is currently
played.;
#X text 96 227 here we distinguish between the user pressing the playbutton
and the internal looping mechanism.;
#N canvas 0 50 601 288 My_RSP_PlaywishDistinguisher4 0;
#X obj 54 96 bang;
#X obj 54 123 f;
#X msg 188 90 0;
#X msg 360 86 1;
#X obj 54 154 moses 1;
#X obj 54 175 t b b;
#X obj 54 44 inlet myReadyToPlay4;
#X obj 188 44 inlet myHumanIdentifier4;
#X obj 360 43 inlet myLoopingIdentifier4;
#X obj 54 226 s currentPlayingSampleNameBang4;
#X obj 325 225 outlet myPlaybackBang4;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 1 1;
#X connect 4 0 5 0;
#X connect 4 1 10 0;
#X connect 5 0 9 0;
#X connect 5 1 10 0;
#X connect 6 0 0 0;
#X connect 7 0 2 0;
#X connect 8 0 3 0;
#X restore 89 203 pd My_RSP_PlaywishDistinguisher4;
#X obj 239 60 t b b;
#X obj 472 59 t b b;
#X connect 0 0 1 1;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 1 12 0;
#X connect 5 0 2 0;
#X connect 6 0 1 0;
#X connect 7 0 13 0;
#X connect 9 0 14 0;
#X connect 12 0 8 0;
#X connect 13 0 0 0;
#X connect 13 1 12 1;
#X connect 14 0 0 0;
#X connect 14 1 12 2;
#X restore 987 387 pd My_RSP_TimeHandler4;
#X obj 987 20 inlet metronomeInlet4;
#X obj 1245 520 dac~ 1 2;
#X obj 1309 167 r fire5;
#N canvas 0 51 1280 643 My_RSP_TimeHandler5 0;
#X msg 65 135 1;
#X obj 50 198 f;
#X msg 86 198 0;
#X obj 50 224 moses 1;
#X text 487 119 This patch handles the humans \; wish to play his selected
audio \; file \, so that playback is only \; done when the metronom
has reached \; the first beat \; (just like in ableton live);
#X obj 86 175 r initBang;
#X obj 50 37 inlet myMetronomeFirstHit1_5;
#X obj 239 37 inlet myHumanDesiresPlayingSaver5;
#X obj 89 333 outlet myPermissionToPlay5;
#X obj 459 37 inlet myCurrentSampleDesiresLooping5;
#X text 486 201 The third inlet is for looping the sample that is currently
played.;
#X text 93 283 here we distinguish between the user pressing the playbutton
and the internal looping mechanism.;
#N canvas 0 50 601 288 My_RSP_PlaywishDistinguisher5 0;
#X obj 54 96 bang;
#X obj 54 123 f;
#X msg 188 90 0;
#X msg 360 86 1;
#X obj 54 154 moses 1;
#X obj 54 175 t b b;
#X obj 54 226 s currentPlayingSampleNameBang5;
#X obj 325 225 outlet myPlaybackBang5;
#X obj 54 44 inlet myReadyToPlay5;
#X obj 188 44 inlet myHumanIdentifier5;
#X obj 360 43 inlet myLoopingIdentifier5;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 1 1;
#X connect 4 0 5 0;
#X connect 4 1 7 0;
#X connect 5 0 6 0;
#X connect 5 1 7 0;
#X connect 8 0 0 0;
#X connect 9 0 2 0;
#X connect 10 0 3 0;
#X restore 89 263 pd My_RSP_PlaywishDistinguisher5;
#X obj 239 65 t b b;
#X obj 459 62 t b b;
#X connect 0 0 1 1;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 1 12 0;
#X connect 5 0 2 0;
#X connect 6 0 1 0;
#X connect 7 0 13 0;
#X connect 9 0 14 0;
#X connect 12 0 8 0;
#X connect 13 0 0 0;
#X connect 13 1 12 1;
#X connect 14 0 0 0;
#X connect 14 1 12 2;
#X restore 1245 382 pd My_RSP_TimeHandler5;
#X obj 1333 430 r sU5;
#X obj 1422 429 r sD5;
#N canvas 247 50 977 660 My_RSP_SelectAndPlayEngine5 0;
#X obj 265 571 zl nth;
#X obj 385 658 zl nth;
#X obj 265 644 phasor~;
#X obj 266 684 *~;
#X obj 399 464 t f f f;
#X obj 511 822 *~;
#X obj 511 768 tabread4~ \$1;
#X msg 662 679 set \$1_right;
#X obj 399 439 f;
#X obj 64 107 t b b b b;
#X msg 64 207 0;
#X obj 363 769 tabread4~ \$1;
#X msg 571 678 set \$1_left;
#X obj 362 821 *~;
#X floatatom 385 684 10 0 0 0 - - -;
#X text 464 142 generate an index between 1 and max number of audio
files \; in folder "samplepack1" to select one audio file to play.
;
#X text 498 489 pass the index to the zl nth objects \; to determine
which values should be \; grabbed out of the value lists the next \;
time the zl nth objects are banged by the \; "playbang (pb1_n).;
#X text 175 132 pb = playbang;
#X text 91 200 start playing \; the audio file;
#X text 451 647 grab number of \; samples of the \; selected audio
file;
#X text 167 575 grab frequency \; for phasor \; according to the \;
selected audio \; file;
#X text 757 684 build array name \; containing the \; selected index
\; so the tabread object \; knows which array \; to read from.;
#X text 482 874 AUDIO OUTPUT;
#X text 590 8 13th April 2018 \; This patch plays the audio files in
the \; SamplePack2 folder. The desired audio file \; is selected by
an index. The index can be \; changed by the 2nd and 3rd inlet (e.g.
by \; the computer's keys or hid input). A bang on the first inlet
plays the selected \; audio file. \; \; OUTLETS: Audio output for dac
object (left and right);
#X floatatom 451 160 5 0 0 0 - - -;
#X obj 64 7 inlet playButton5;
#X obj 267 9 inlet selectUp5;
#X obj 381 10 inlet selectDown5;
#X obj 115 130 s pb1_1_5;
#X obj 98 153 s pb1_2_5;
#X obj 81 177 s pb1_3_5;
#X obj 414 111 r initIndexBang5;
#N canvas 74 97 553 615 My_RSP_IndexGenerator5 0;
#X obj 129 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 163 134 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 129 222 moses;
#X obj 201 205 / 2;
#X msg 129 173 1;
#X obj 129 283 +;
#X obj 159 283 f;
#X obj 322 312 clip;
#X obj 305 143 t b b;
#X obj 305 118 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 332 239 1;
#X obj 156 253 -;
#X obj 163 173 f;
#X obj 193 173 - 1;
#X floatatom 223 393 5 0 0 0 - - -;
#X obj 223 371 <= 0;
#X obj 129 349 >;
#X obj 129 471 spigot;
#X obj 129 447 f;
#X obj 129 374 t b f;
#X obj 223 433 t b f;
#X obj 223 454 f;
#X obj 223 480 spigot;
#X obj 305 188 f;
#X floatatom 332 189 5 0 0 0 - - -;
#X text 590 36 This patch puts out the desired index number which controls
the desired audiosample to be played. \; inlets: \; left: increase
index \; middle: decrease index \; right: init the patch with the max
number of audio files \; Before the patch is init-banged \, it has
to receive "AmountOfAudioSamplesInSP1 to know the max number the index
is allowed to be \; outlets \; left: bang when the maximum index is
reached \; middle: bang when the minimum index is reached \; right:
current index;
#X text 426 384 output the index;
#X text 403 527 output warning bang (first index reached);
#X text 302 550 output warning bang (last index reached);
#X obj 129 36 inlet increaseIndexSP5;
#X obj 163 62 inlet decreaseIndexSP5;
#X obj 305 89 inlet bangToInitWithNumberOfIndexes5;
#X text 175 108 decrease \; SamplePack5Index;
#X text 11 104 increase \; SamplePack5Index;
#X obj 193 152 r maxNoOfSamples5;
#X obj 320 166 r AmountOfAudioFilesInSP5;
#X obj 305 212 s maxNoOfSamples5;
#X obj 171 230 r maxNoOfSamples5;
#X obj 372 289 r maxNoOfSamples5;
#X obj 144 325 r maxNoOfSamples5;
#X obj 259 345 s sP5Index;
#X obj 144 414 r sP5Index;
#X obj 322 386 outlet SP5_Index;
#X obj 278 437 r sP5Index;
#X obj 223 523 outlet FirstSampleReachedSP5;
#X obj 129 549 outlet LastSampleReachedSP5;
#X connect 0 0 4 0;
#X connect 1 0 12 0;
#X connect 2 0 5 0;
#X connect 2 1 11 0;
#X connect 3 0 2 1;
#X connect 4 0 2 0;
#X connect 5 0 7 0;
#X connect 5 0 15 0;
#X connect 5 0 16 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X connect 7 0 40 0;
#X connect 7 0 42 0;
#X connect 8 0 23 0;
#X connect 8 1 10 0;
#X connect 9 0 8 0;
#X connect 10 0 7 1;
#X connect 11 0 5 0;
#X connect 12 0 2 0;
#X connect 13 0 12 1;
#X connect 14 0 20 0;
#X connect 15 0 14 0;
#X connect 16 0 19 0;
#X connect 17 0 45 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X connect 19 1 17 1;
#X connect 20 0 21 0;
#X connect 20 1 22 1;
#X connect 21 0 22 0;
#X connect 22 0 44 0;
#X connect 23 0 3 0;
#X connect 23 0 36 0;
#X connect 29 0 0 0;
#X connect 30 0 1 0;
#X connect 31 0 9 0;
#X connect 34 0 13 0;
#X connect 35 0 23 1;
#X connect 35 0 24 0;
#X connect 37 0 11 1;
#X connect 38 0 7 2;
#X connect 39 0 16 1;
#X connect 41 0 18 1;
#X connect 43 0 21 1;
#X restore 267 143 pd My_RSP_IndexGenerator5;
#X obj 340 180 print SP5>>First Sample Reached;
#X obj 267 204 print SP5>>Last Sample Reached;
#X obj 399 417 r pb1_1_5;
#X obj 265 535 r listValuesForPhasor5;
#X obj 211 554 r pb1_3_5;
#X obj 385 606 r listNumberOfSamplesOfEachAudioFile5;
#X obj 395 626 r pb1_2_5;
#X obj 571 653 makefilename SampleArray5_%d;
#X obj 377 795 r vol5;
#X text 426 791 adjust volume \; (from fader 5);
#X obj 362 841 outlet~ toDacLeft5;
#X obj 511 844 outlet~ toDacRight5;
#X msg 73 627 0;
#X text 55 582 stop playing;
#X obj 73 602 r stopAll;
#X obj 174 766 r metroHits;
#X obj 174 793 snapshot~;
#X obj 174 839 /;
#X floatatom 250 1010 5 0 0 0 - - -;
#X obj 250 1037 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text -21 816 divide by the number of \; samples of the currently
\; playing audio file to make the \; position a value between 0 and
1;
#X text -19 877 output on the right outlet \; if the end is almost
reached.;
#X text 18 926 send a wish for playback \; which will ONLY BE ACKNOWLEGDED
\; by the metronome:);
#X text -22 761 get the metronome's 16th notes;
#X text -20 783 get position of the \; currently playing sample;
#X text 1 738 ***SYNCING PLAYBACK TO METRONOME***;
#X floatatom 174 913 5 0 0 0 - - -;
#X msg 293 950 0;
#X obj 231 950 spigot 1;
#X obj 231 980 t b f b;
#X msg 231 1106 1;
#X text 284 973 here we only let the first value \; of the moses' right
output come trough;
#X obj 276 923 r openSpigot5;
#X obj 231 1130 s openSpigot5;
#X obj 231 1081 delay 2000;
#X obj 275 112 r indexInit;
#X text 273 63 select first \; sample after \; loading the patch;
#N canvas 329 283 450 300 My_RSP_LedAlert 0;
#X text 199 46 this patch toggles the blue led \; on gpio24 to show
that the first or last \; sample is reached.;
#X obj 71 150 wiringPi_gpio 24 0 0;
#X msg 71 119 1;
#X obj 44 85 t b b;
#X msg 44 217 0;
#X obj 44 186 delay 100;
#X obj 44 30 inlet alertBang;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 3 1 2 0;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 6 0 3 0;
#X restore 215 226 pd My_RSP_LedAlert;
#X obj 469 317 f;
#X text 503 318 store current selected index;
#X text 574 333 send currentSelectedIndex to subpatch "Looping_Index_Handler"
and to parent patch;
#X obj 414 279 t f f;
#X obj 469 279 r updateZlnthObjectsBang5;
#X obj 414 339 s currentSelectedIndexSP5;
#X floatatom 496 446 5 0 0 0 - - -;
#X obj 496 422 r indexCorrectionForLoopingSP5;
#N canvas 0 100 1015 566 My_RSP_Looping_Index_Handler5 0;
#X text 603 28 29th August 2018 This subpatch receives a bang on its
inlet \, when the currently played sample has reached its end. This
subpatch then checks if the currently playing sample is still selected
by the user or not. If not \, there has to be sent an index correction
to the zl nth objects of the parent patch ("RSP_SelectAndPlayEngine")
in order to loop the currently playing sample;
#X obj 131 301 ==;
#X floatatom 146 278 5 0 0 0 - - -;
#X floatatom 146 158 5 0 0 0 - - -;
#X obj 131 186 f;
#X floatatom 131 328 5 0 0 0 - - -;
#X obj 146 240 t f f;
#X obj 131 410 f;
#X obj 131 356 moses 1;
#X text 239 239 if the currentSelectedIndex is not equal to the lastPlayedIndex
\, then moses receives a 0 and bangs at its left outlet. In this case
we have to send indexCorrectionforLooping (==the lastPlayedIndex) in
front of the zl nth objects above. By this \, the sample that is currently
playing is looped when it has reached its end. Otherwise the system
would always play the currently selected sample \, which might be different
from the currently played sample because the user might have chosen
another sample in the meantime \;;
#X floatatom 176 478 5 0 0 0 - - -;
#X obj 131 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 270 443 f;
#X floatatom 297 443 5 0 0 0 - - -;
#X obj 170 407 t b b;
#X obj 170 383 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 131 442 t f b f;
#X obj 131 31 inlet currentSampleHasReachedItsEnd5;
#X obj 146 132 r currentSelectedIndexSP5;
#X obj 146 209 r lastIndexPlayedSP5;
#X text 762 251 comment;
#X obj 285 419 r currentSelectedIndexSP5;
#X obj 270 465 print SP5: loopingFire5 playing currently selected sample
;
#X obj 170 499 s indexCorrectionForLoopingSP5;
#X obj 150 519 s loopingFire5;
#X obj 131 541 print SP5: loopingFire5 with index correction to;
#X connect 1 0 5 0;
#X connect 2 0 1 1;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X connect 5 0 8 0;
#X connect 6 0 2 0;
#X connect 6 1 7 1;
#X connect 7 0 16 0;
#X connect 8 0 11 0;
#X connect 8 1 15 0;
#X connect 11 0 7 0;
#X connect 12 0 22 0;
#X connect 14 0 12 0;
#X connect 14 1 24 0;
#X connect 15 0 14 0;
#X connect 16 0 25 0;
#X connect 16 1 24 0;
#X connect 16 2 10 0;
#X connect 16 2 23 0;
#X connect 17 0 4 0;
#X connect 18 0 3 0;
#X connect 19 0 6 0;
#X connect 21 0 12 1;
#X connect 21 0 13 0;
#X restore 250 1059 pd My_RSP_Looping_Index_Handler5;
#X obj 174 885 moses 0.98;
#X connect 0 0 2 0;
#X connect 1 0 3 1;
#X connect 1 0 14 0;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 3 0 11 0;
#X connect 3 0 49 0;
#X connect 4 0 0 1;
#X connect 4 1 1 1;
#X connect 4 2 40 0;
#X connect 5 0 44 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 8 0 4 0;
#X connect 9 0 10 0;
#X connect 9 1 30 0;
#X connect 9 2 29 0;
#X connect 9 3 28 0;
#X connect 10 0 2 1;
#X connect 11 0 13 0;
#X connect 12 0 11 0;
#X connect 13 0 43 0;
#X connect 14 0 50 1;
#X connect 25 0 9 0;
#X connect 26 0 32 0;
#X connect 27 0 32 1;
#X connect 31 0 32 2;
#X connect 32 0 34 0;
#X connect 32 0 70 0;
#X connect 32 1 33 0;
#X connect 32 1 70 0;
#X connect 32 2 24 0;
#X connect 32 2 74 0;
#X connect 35 0 8 0;
#X connect 36 0 0 0;
#X connect 37 0 0 0;
#X connect 38 0 1 0;
#X connect 39 0 1 0;
#X connect 40 0 7 0;
#X connect 40 0 12 0;
#X connect 41 0 13 1;
#X connect 41 0 5 1;
#X connect 45 0 2 0;
#X connect 47 0 45 0;
#X connect 48 0 49 0;
#X connect 49 0 50 0;
#X connect 50 0 80 0;
#X connect 51 0 52 0;
#X connect 52 0 79 0;
#X connect 60 0 61 1;
#X connect 61 0 62 0;
#X connect 62 0 67 0;
#X connect 62 1 51 0;
#X connect 62 2 60 0;
#X connect 63 0 66 0;
#X connect 65 0 61 1;
#X connect 67 0 63 0;
#X connect 68 0 32 0;
#X connect 71 0 8 1;
#X connect 74 0 76 0;
#X connect 74 1 71 1;
#X connect 75 0 71 0;
#X connect 78 0 77 0;
#X connect 78 0 8 1;
#X connect 80 0 59 0;
#X connect 80 1 61 0;
#X restore 1245 453 pd My_RSP_SelectAndPlayEngine5;
#X obj 1245 19 inlet metronomeInlet5;
#X obj 1506 520 dac~ 1 2;
#X obj 1683 421 r sD6;
#N canvas 0 51 1280 643 My_RSP_TimeHandler6 0;
#X msg 65 105 1;
#X obj 50 168 f;
#X msg 82 167 0;
#X obj 50 194 moses 1;
#X obj 82 144 r initBang;
#X obj 50 37 inlet myMetronomeFirstHit1_6;
#X obj 239 39 inlet myHumanDesiresPlayingSaver6;
#X obj 89 368 outlet myPermissionToPlay6;
#X text 441 140 This patch handles the humans \; wish to play his selected
audio \; file \, so that playback is only \; done when the metronom
has reached \; the first beat \; (just like in ableton live);
#X text 450 226 The third inlet is for looping the sample that is currently
played.;
#X obj 449 40 inlet myCurrentSampleDesiresLooping6;
#X text 96 307 here we distinguish between the user pressing the playbutton
and the internal looping mechanism.;
#N canvas 0 50 601 288 My_RSP_PlaywishDistinguisher6 0;
#X obj 54 96 bang;
#X obj 54 123 f;
#X msg 188 90 0;
#X msg 360 86 1;
#X obj 54 154 moses 1;
#X obj 54 175 t b b;
#X obj 54 44 inlet myReadyToPlay6;
#X obj 188 44 inlet myHumanIdentifier6;
#X obj 360 43 inlet myLoopingIdentifier6;
#X obj 54 226 s currentPlayingSampleNameBang6;
#X obj 325 225 outlet myPlaybackBang6;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 1 1;
#X connect 4 0 5 0;
#X connect 4 1 10 0;
#X connect 5 0 9 0;
#X connect 5 1 10 0;
#X connect 6 0 0 0;
#X connect 7 0 2 0;
#X connect 8 0 3 0;
#X restore 89 283 pd My_RSP_PlaywishDistinguisher6;
#X obj 239 60 t b b;
#X obj 449 61 t b b;
#X connect 0 0 1 1;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 1 12 0;
#X connect 4 0 2 0;
#X connect 5 0 1 0;
#X connect 6 0 13 0;
#X connect 10 0 14 0;
#X connect 12 0 7 0;
#X connect 13 0 0 0;
#X connect 13 1 12 1;
#X connect 14 0 0 0;
#X connect 14 1 12 2;
#X restore 1506 380 pd My_RSP_TimeHandler6;
#X obj 1594 422 r sU6;
#N canvas 260 76 911 612 My_RSP_SelectAndPlayEngine6 0;
#X obj 265 551 zl nth;
#X obj 385 638 zl nth;
#X obj 265 624 phasor~;
#X obj 266 664 *~;
#X obj 399 444 t f f f;
#X obj 511 802 *~;
#X obj 511 748 tabread4~ \$1;
#X msg 662 659 set \$1_right;
#X obj 399 419 f;
#X obj 64 107 t b b b b;
#X msg 64 207 0;
#X obj 363 749 tabread4~ \$1;
#X msg 571 658 set \$1_left;
#X obj 362 801 *~;
#X floatatom 385 664 10 0 0 0 - - -;
#X text 464 142 generate an index between 1 and max number of audio
files \; in folder "samplepack1" to select one audio file to play.
;
#X text 488 450 pass the index to the zl nth objects \; to determine
which values should be \; grabbed out of the value lists the next \;
time the zl nth objects are banged by the \; "playbang (pb1_n).;
#X text 175 132 pb = playbang;
#X text 91 200 start playing \; the audio file;
#X text 451 627 grab number of \; samples of the \; selected audio
file;
#X text 167 555 grab frequency \; for phasor \; according to the \;
selected audio \; file;
#X text 757 664 build array name \; containing the \; selected index
\; so the tabread object \; knows which array \; to read from.;
#X text 446 847 AUDIO OUTPUT;
#X text 590 8 13th April 2018 \; This patch plays the audio files in
the \; SamplePack2 folder. The desired audio file \; is selected by
an index. The index can be \; changed by the 2nd and 3rd inlet (e.g.
by \; the computer's keys or hid input). A bang on the first inlet
plays the selected \; audio file. \; \; OUTLETS: Audio output for dac
object (left and right);
#X floatatom 451 160 5 0 0 0 - - -;
#X obj 64 17 inlet playButton6;
#X obj 267 19 inlet selectUp6;
#X obj 381 20 inlet selectDown6;
#X obj 115 130 s pb1_1_6;
#X obj 98 153 s pb1_2_6;
#X obj 81 177 s pb1_3_6;
#X obj 414 111 r initIndexBang6;
#N canvas 73 96 553 615 My_RSP_IndexGenerator6 0;
#X obj 129 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 163 134 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 129 222 moses;
#X obj 201 205 / 2;
#X msg 129 173 1;
#X obj 129 283 +;
#X obj 159 283 f;
#X obj 322 312 clip;
#X obj 305 143 t b b;
#X obj 305 118 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 332 239 1;
#X obj 156 253 -;
#X obj 163 173 f;
#X obj 193 173 - 1;
#X floatatom 223 393 5 0 0 0 - - -;
#X obj 223 371 <= 0;
#X obj 129 349 >;
#X obj 129 471 spigot;
#X obj 129 447 f;
#X obj 129 374 t b f;
#X obj 223 433 t b f;
#X obj 223 454 f;
#X obj 223 480 spigot;
#X obj 305 188 f;
#X floatatom 332 189 5 0 0 0 - - -;
#X text 590 36 This patch puts out the desired index number which controls
the desired audiosample to be played. \; inlets: \; left: increase
index \; middle: decrease index \; right: init the patch with the max
number of audio files \; Before the patch is init-banged \, it has
to receive "AmountOfAudioSamplesInSP1 to know the max number the index
is allowed to be \; outlets \; left: bang when the maximum index is
reached \; middle: bang when the minimum index is reached \; right:
current index;
#X text 426 384 output the index;
#X text 403 527 output warning bang (first index reached);
#X text 302 550 output warning bang (last index reached);
#X obj 129 36 inlet increaseIndexSP6;
#X obj 163 62 inlet decreaseIndexSP6;
#X obj 305 89 inlet bangToInitWithNumberOfIndexes6;
#X text 175 108 decrease \; SamplePack6Index;
#X text 11 104 increase \; SamplePack6Index;
#X obj 193 152 r maxNoOfSamples6;
#X obj 320 166 r AmountOfAudioFilesInSP6;
#X obj 171 230 r maxNoOfSamples6;
#X obj 305 212 s maxNoOfSamples6;
#X obj 372 289 r maxNoOfSamples6;
#X obj 144 325 r maxNoOfSamples6;
#X obj 259 345 s sP6Index;
#X obj 144 414 r sP6Index;
#X obj 322 386 outlet SP6_Index;
#X obj 278 437 r sP6Index;
#X obj 223 523 outlet FirstSampleReachedSP6;
#X obj 129 549 outlet LastSampleReachedSP6;
#X connect 0 0 4 0;
#X connect 1 0 12 0;
#X connect 2 0 5 0;
#X connect 2 1 11 0;
#X connect 3 0 2 1;
#X connect 4 0 2 0;
#X connect 5 0 7 0;
#X connect 5 0 15 0;
#X connect 5 0 16 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X connect 7 0 40 0;
#X connect 7 0 42 0;
#X connect 8 0 23 0;
#X connect 8 1 10 0;
#X connect 9 0 8 0;
#X connect 10 0 7 1;
#X connect 11 0 5 0;
#X connect 12 0 2 0;
#X connect 13 0 12 1;
#X connect 14 0 20 0;
#X connect 15 0 14 0;
#X connect 16 0 19 0;
#X connect 17 0 45 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X connect 19 1 17 1;
#X connect 20 0 21 0;
#X connect 20 1 22 1;
#X connect 21 0 22 0;
#X connect 22 0 44 0;
#X connect 23 0 3 0;
#X connect 23 0 37 0;
#X connect 29 0 0 0;
#X connect 30 0 1 0;
#X connect 31 0 9 0;
#X connect 34 0 13 0;
#X connect 35 0 23 1;
#X connect 35 0 24 0;
#X connect 36 0 11 1;
#X connect 38 0 7 2;
#X connect 39 0 16 1;
#X connect 41 0 18 1;
#X connect 43 0 21 1;
#X restore 267 143 pd My_RSP_IndexGenerator6;
#X obj 340 193 print SP6>>First Sample Reached;
#X obj 267 217 print SP6>>Last Sample Reached;
#X obj 399 397 r pb1_1_6;
#X obj 265 515 r listValuesForPhasor6;
#X obj 211 534 r pb1_3_6;
#X obj 385 586 r listNumberOfSamplesOfEachAudioFile6;
#X obj 395 606 r pb1_2_6;
#X obj 571 633 makefilename SampleArray6_%d;
#X obj 377 775 r vol6;
#X text 426 771 adjust volume \; (from fader 6);
#X obj 362 821 outlet~ toDacLeft6;
#X obj 511 824 outlet~ toDacRight6;
#X msg 67 607 0;
#X text 26 557 stop playing;
#X obj 67 582 r stopAll;
#X obj 184 716 r metroHits;
#X obj 184 743 snapshot~;
#X obj 184 789 /;
#X text -11 766 divide by the number of \; samples of the currently
\; playing audio file to make the \; position a value between 0 and
1;
#X text -9 827 output on the right outlet \; if the end is almost reached.
;
#X text 23 876 send a wish for playback \; which will ONLY BE ACKNOWLEGDED
\; by the metronome:);
#X text -12 711 get the metronome's 16th notes;
#X text -10 733 get position of the \; currently playing sample;
#X text 11 688 ***SYNCING PLAYBACK TO METRONOME***;
#X floatatom 260 947 5 0 0 0 - - -;
#X obj 260 974 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 303 887 0;
#X obj 241 887 spigot 1;
#X obj 241 917 t b f b;
#X msg 241 1043 1;
#X text 313 921 here we only let the first value \; of the moses' right
output come trough;
#X obj 286 860 r openSpigot6;
#X obj 241 1067 s openSpigot6;
#X obj 241 1018 delay 2000;
#X obj 275 113 r indexInit;
#X text 273 64 select first \; sample after \; loading the patch;
#N canvas 329 283 450 300 My_RSP_LedAlert 0;
#X text 199 46 this patch toggles the blue led \; on gpio24 to show
that the first or last \; sample is reached.;
#X obj 71 150 wiringPi_gpio 24 0 0;
#X msg 71 119 1;
#X obj 44 85 t b b;
#X msg 44 217 0;
#X obj 44 186 delay 100;
#X obj 44 30 inlet alertBang;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 3 1 2 0;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 6 0 3 0;
#X restore 217 238 pd My_RSP_LedAlert;
#X obj 469 317 f;
#X text 503 318 store current selected index;
#X text 574 333 send currentSelectedIndex to subpatch "Looping_Index_Handler"
and to parent patch;
#X obj 414 279 t f f;
#X obj 469 279 r updateZlnthObjectsBang6;
#X obj 414 341 s currentSelectedIndexSP6;
#X floatatom 605 424 5 0 0 0 - - -;
#X obj 605 402 r indexCorrectionForLoopingSP6;
#N canvas 0 101 1015 566 My_RSP_Looping_Index_Handler6 0;
#X text 603 28 29th August 2018 This subpatch receives a bang on its
inlet \, when the currently played sample has reached its end. This
subpatch then checks if the currently playing sample is still selected
by the user or not. If not \, there has to be sent an index correction
to the zl nth objects of the parent patch ("RSP_SelectAndPlayEngine")
in order to loop the currently playing sample;
#X obj 131 301 ==;
#X floatatom 146 278 5 0 0 0 - - -;
#X floatatom 146 158 5 0 0 0 - - -;
#X obj 131 186 f;
#X floatatom 131 328 5 0 0 0 - - -;
#X obj 146 240 t f f;
#X obj 131 410 f;
#X obj 131 356 moses 1;
#X text 213 243 if the currentSelectedIndex is not equal to the lastPlayedIndex
\, then moses receives a 0 and bangs at its left outlet. In this case
we have to send indexCorrectionforLooping (==the lastPlayedIndex) in
front of the zl nth objects above. By this \, the sample that is currently
playing is looped when it has reached its end. Otherwise the system
would always play the currently selected sample \, which might be different
from the currently played sample because the user might have chosen
another sample in the meantime \;;
#X floatatom 176 478 5 0 0 0 - - -;
#X obj 131 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 270 443 f;
#X floatatom 297 443 5 0 0 0 - - -;
#X obj 170 407 t b b;
#X obj 170 383 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 131 442 t f b f;
#X obj 131 31 inlet currentSampleHasReachedItsEnd6;
#X obj 146 132 r currentSelectedIndexSP6;
#X obj 146 209 r lastIndexPlayedSP6;
#X obj 285 419 r currentSelectedIndexSP6;
#X obj 270 465 print SP6: loopingFire6 playing currently selected sample
;
#X obj 170 499 s indexCorrectionForLoopingSP6;
#X obj 150 519 s loopingFire6;
#X obj 131 541 print SP6: loopingFire6 with index correction to;
#X connect 1 0 5 0;
#X connect 2 0 1 1;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X connect 5 0 8 0;
#X connect 6 0 2 0;
#X connect 6 1 7 1;
#X connect 7 0 16 0;
#X connect 8 0 11 0;
#X connect 8 1 15 0;
#X connect 11 0 7 0;
#X connect 12 0 21 0;
#X connect 14 0 12 0;
#X connect 14 1 23 0;
#X connect 15 0 14 0;
#X connect 16 0 24 0;
#X connect 16 1 23 0;
#X connect 16 2 10 0;
#X connect 16 2 22 0;
#X connect 17 0 4 0;
#X connect 18 0 3 0;
#X connect 19 0 6 0;
#X connect 20 0 12 1;
#X connect 20 0 13 0;
#X restore 260 996 pd My_RSP_Looping_Index_Handler6;
#X floatatom 184 862 5 0 0 0 - - -;
#X obj 184 835 moses 0.98;
#X connect 0 0 2 0;
#X connect 1 0 3 1;
#X connect 1 0 14 0;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 3 0 11 0;
#X connect 3 0 49 0;
#X connect 4 0 0 1;
#X connect 4 1 1 1;
#X connect 4 2 40 0;
#X connect 5 0 44 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 8 0 4 0;
#X connect 9 0 10 0;
#X connect 9 1 30 0;
#X connect 9 2 29 0;
#X connect 9 3 28 0;
#X connect 10 0 2 1;
#X connect 11 0 13 0;
#X connect 12 0 11 0;
#X connect 13 0 43 0;
#X connect 14 0 50 1;
#X connect 25 0 9 0;
#X connect 26 0 32 0;
#X connect 27 0 32 1;
#X connect 31 0 32 2;
#X connect 32 0 34 0;
#X connect 32 0 69 0;
#X connect 32 1 33 0;
#X connect 32 1 69 0;
#X connect 32 2 24 0;
#X connect 32 2 73 0;
#X connect 35 0 8 0;
#X connect 36 0 0 0;
#X connect 37 0 0 0;
#X connect 38 0 1 0;
#X connect 39 0 1 0;
#X connect 40 0 7 0;
#X connect 40 0 12 0;
#X connect 41 0 13 1;
#X connect 41 0 5 1;
#X connect 45 0 2 0;
#X connect 47 0 45 0;
#X connect 48 0 49 0;
#X connect 49 0 50 0;
#X connect 50 0 80 0;
#X connect 57 0 58 0;
#X connect 58 0 78 0;
#X connect 59 0 60 1;
#X connect 60 0 61 0;
#X connect 61 0 66 0;
#X connect 61 1 57 0;
#X connect 61 2 59 0;
#X connect 62 0 65 0;
#X connect 64 0 60 1;
#X connect 66 0 62 0;
#X connect 67 0 32 0;
#X connect 70 0 8 1;
#X connect 73 0 75 0;
#X connect 73 1 70 1;
#X connect 74 0 70 0;
#X connect 77 0 76 0;
#X connect 77 0 8 1;
#X connect 80 0 79 0;
#X connect 80 1 60 0;
#X restore 1506 445 pd My_RSP_SelectAndPlayEngine6;
#X obj 1506 22 inlet metronomeInlet6;
#X obj 2022 452 r sD7;
#N canvas 0 51 1280 643 My_RSP_TimeHandler7 0;
#X msg 65 115 1;
#X obj 50 178 f;
#X msg 82 177 0;
#X obj 50 204 moses 1;
#X obj 82 154 r initBang;
#X obj 50 37 inlet myMetronomeFirstHit1_7;
#X obj 239 38 inlet myHumanDesiresPlayingSaver7;
#X obj 89 348 outlet myPermissionToPlay7;
#X text 438 135 This patch handles the humans \; wish to play his selected
audio \; file \, so that playback is only \; done when the metronom
has reached \; the first beat \; (just like in ableton live);
#X text 438 216 The third inlet is for looping the sample that is currently
played.;
#X obj 450 39 inlet myCurrentSampleDesiresLooping7;
#X text 96 287 here we distinguish between the user pressing the playbutton
and the internal looping mechanism.;
#N canvas 0 50 601 288 My_RSP_PlaywishDistinguisher7 0;
#X obj 54 96 bang;
#X obj 54 123 f;
#X msg 188 90 0;
#X msg 360 86 1;
#X obj 54 154 moses 1;
#X obj 54 175 t b b;
#X obj 54 44 inlet myReadyToPlay7;
#X obj 188 44 inlet myHumanIdentifier7;
#X obj 360 43 inlet myLoopingIdentifier7;
#X obj 54 226 s currentPlayingSampleNameBang7;
#X obj 325 225 outlet myPlaybackBang7;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 1 1;
#X connect 4 0 5 0;
#X connect 4 1 10 0;
#X connect 5 0 9 0;
#X connect 5 1 10 0;
#X connect 6 0 0 0;
#X connect 7 0 2 0;
#X connect 8 0 3 0;
#X restore 89 263 pd My_RSP_PlaywishDistinguisher7;
#X obj 239 59 t b b;
#X obj 450 60 t b b;
#X connect 0 0 1 1;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 1 12 0;
#X connect 4 0 2 0;
#X connect 5 0 1 0;
#X connect 6 0 13 0;
#X connect 10 0 14 0;
#X connect 12 0 7 0;
#X connect 13 0 0 0;
#X connect 13 1 12 1;
#X connect 14 0 0 0;
#X connect 14 1 12 2;
#X restore 1845 381 pd My_RSP_TimeHandler7;
#X obj 1933 453 r sU7;
#N canvas 31 56 911 612 My_RSP_SelectAndPlayEngine7 0;
#X obj 265 541 zl nth;
#X obj 385 628 zl nth;
#X obj 265 614 phasor~;
#X obj 266 654 *~;
#X obj 399 414 t f f f;
#X obj 511 792 *~;
#X obj 511 738 tabread4~ \$1;
#X msg 662 649 set \$1_right;
#X obj 399 389 f;
#X obj 64 107 t b b b b;
#X msg 64 207 0;
#X obj 363 739 tabread4~ \$1;
#X msg 571 648 set \$1_left;
#X obj 362 791 *~;
#X floatatom 385 654 10 0 0 0 - - -;
#X text 464 142 generate an index between 1 and max number of audio
files \; in folder "samplepack1" to select one audio file to play.
;
#X text 475 415 pass the index to the zl nth objects \; to determine
which values should be \; grabbed out of the value lists the next \;
time the zl nth objects are banged by the \; "playbang (pb1_n).;
#X text 175 132 pb = playbang;
#X text 91 200 start playing \; the audio file;
#X text 451 617 grab number of \; samples of the \; selected audio
file;
#X text 167 545 grab frequency \; for phasor \; according to the \;
selected audio \; file;
#X text 757 654 build array name \; containing the \; selected index
\; so the tabread object \; knows which array \; to read from.;
#X text 590 8 13th April 2018 \; This patch plays the audio files in
the \; SamplePack2 folder. The desired audio file \; is selected by
an index. The index can be \; changed by the 2nd and 3rd inlet (e.g.
by \; the computer's keys or hid input). A bang on the first inlet
plays the selected \; audio file. \; \; OUTLETS: Audio output for dac
object (left and right);
#X floatatom 451 160 5 0 0 0 - - -;
#X obj 64 7 inlet playButton7;
#X obj 267 9 inlet selectUp7;
#X obj 381 10 inlet selectDown7;
#X obj 115 130 s pb1_1_7;
#X obj 98 153 s pb1_2_7;
#X obj 81 177 s pb1_3_7;
#X obj 414 111 r initIndexBang7;
#N canvas 72 95 553 615 My_RSP_IndexGenerator7 0;
#X obj 129 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 163 134 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 129 222 moses;
#X obj 201 205 / 2;
#X msg 129 173 1;
#X obj 129 283 +;
#X obj 159 283 f;
#X obj 322 312 clip;
#X obj 305 143 t b b;
#X obj 305 118 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 332 239 1;
#X obj 156 253 -;
#X obj 163 173 f;
#X obj 193 173 - 1;
#X floatatom 223 393 5 0 0 0 - - -;
#X obj 223 371 <= 0;
#X obj 129 349 >;
#X obj 129 471 spigot;
#X obj 129 447 f;
#X obj 129 374 t b f;
#X obj 223 433 t b f;
#X obj 223 454 f;
#X obj 223 480 spigot;
#X obj 305 188 f;
#X floatatom 332 189 5 0 0 0 - - -;
#X text 590 36 This patch puts out the desired index number which controls
the desired audiosample to be played. \; inlets: \; left: increase
index \; middle: decrease index \; right: init the patch with the max
number of audio files \; Before the patch is init-banged \, it has
to receive "AmountOfAudioSamplesInSP1 to know the max number the index
is allowed to be \; outlets \; left: bang when the maximum index is
reached \; middle: bang when the minimum index is reached \; right:
current index;
#X text 426 384 output the index;
#X text 403 527 output warning bang (first index reached);
#X text 302 550 output warning bang (last index reached);
#X obj 129 36 inlet increaseIndexSP7;
#X obj 163 62 inlet decreaseIndexSP7;
#X obj 305 89 inlet bangToInitWithNumberOfIndexes7;
#X text 11 104 increase \; SamplePack7Index;
#X text 175 108 decrease \; SamplePack7Index;
#X obj 193 152 r maxNoOfSamples7;
#X obj 320 166 r AmountOfAudioFilesInSP7;
#X obj 305 212 s maxNoOfSamples7;
#X obj 171 230 r maxNoOfSamples7;
#X obj 372 289 r maxNoOfSamples7;
#X obj 144 325 r maxNoOfSamples7;
#X obj 259 345 s sP7Index;
#X obj 144 414 r sP7Index;
#X obj 322 386 outlet SP7_Index;
#X obj 278 437 r sP7Index;
#X obj 223 523 outlet FirstSampleReachedSP7;
#X obj 129 549 outlet LastSampleReachedSP7;
#X connect 0 0 4 0;
#X connect 1 0 12 0;
#X connect 2 0 5 0;
#X connect 2 1 11 0;
#X connect 3 0 2 1;
#X connect 4 0 2 0;
#X connect 5 0 7 0;
#X connect 5 0 15 0;
#X connect 5 0 16 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X connect 7 0 40 0;
#X connect 7 0 42 0;
#X connect 8 0 23 0;
#X connect 8 1 10 0;
#X connect 9 0 8 0;
#X connect 10 0 7 1;
#X connect 11 0 5 0;
#X connect 12 0 2 0;
#X connect 13 0 12 1;
#X connect 14 0 20 0;
#X connect 15 0 14 0;
#X connect 16 0 19 0;
#X connect 17 0 45 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X connect 19 1 17 1;
#X connect 20 0 21 0;
#X connect 20 1 22 1;
#X connect 21 0 22 0;
#X connect 22 0 44 0;
#X connect 23 0 3 0;
#X connect 23 0 36 0;
#X connect 29 0 0 0;
#X connect 30 0 1 0;
#X connect 31 0 9 0;
#X connect 34 0 13 0;
#X connect 35 0 23 1;
#X connect 35 0 24 0;
#X connect 37 0 11 1;
#X connect 38 0 7 2;
#X connect 39 0 16 1;
#X connect 41 0 18 1;
#X connect 43 0 21 1;
#X restore 267 143 pd My_RSP_IndexGenerator7;
#X obj 340 183 print SP7>>First Sample Reached;
#X obj 267 207 print SP7>>Last Sample Reached;
#X obj 399 367 r pb1_1_7;
#X obj 265 505 r listValuesForPhasor7;
#X obj 211 524 r pb1_3_7;
#X obj 385 576 r listNumberOfSamplesOfEachAudioFile7;
#X obj 395 596 r pb1_2_7;
#X obj 571 623 makefilename SampleArray7_%d;
#X obj 377 765 r vol7;
#X text 426 761 adjust volume \; (from fader 7);
#X obj 362 811 outlet~ toDacLeft7;
#X obj 511 814 outlet~ toDacRight7;
#X msg 71 597 0;
#X text 30 547 stop playing;
#X obj 71 572 r stopAll;
#X text 445 844 AUDIO OUTPUT;
#X obj 194 756 r metroHits;
#X obj 194 783 snapshot~;
#X obj 194 829 /;
#X text -1 806 divide by the number of \; samples of the currently
\; playing audio file to make the \; position a value between 0 and
1;
#X text 1 867 output on the right outlet \; if the end is almost reached.
;
#X text 38 916 send a wish for playback \; which will ONLY BE ACKNOWLEGDED
\; by the metronome:);
#X text -2 751 get the metronome's 16th notes;
#X text 0 773 get position of the \; currently playing sample;
#X text 21 728 ***SYNCING PLAYBACK TO METRONOME***;
#X floatatom 270 977 5 0 0 0 - - -;
#X obj 270 1004 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 313 917 0;
#X obj 251 917 spigot 1;
#X obj 251 947 t b f b;
#X msg 251 1073 1;
#X text 323 951 here we only let the first value \; of the moses' right
output come trough;
#X obj 296 890 r openSpigot7;
#X obj 251 1097 s openSpigot7;
#X obj 251 1048 delay 2000;
#X obj 275 115 r indexInit;
#X text 273 66 select first \; sample after \; loading the patch;
#N canvas 329 283 450 300 My_RSP_LedAlert 0;
#X text 199 46 this patch toggles the blue led \; on gpio24 to show
that the first or last \; sample is reached.;
#X obj 71 150 wiringPi_gpio 24 0 0;
#X msg 71 119 1;
#X obj 44 85 t b b;
#X msg 44 217 0;
#X obj 44 186 delay 100;
#X obj 44 30 inlet alertBang;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 3 1 2 0;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 6 0 3 0;
#X restore 219 229 pd My_RSP_LedAlert;
#X obj 469 287 f;
#X text 503 288 store current selected index;
#X text 574 303 send currentSelectedIndex to subpatch "Looping_Index_Handler"
and to parent patch;
#X obj 414 249 t f f;
#X obj 469 249 r updateZlnthObjectsBang7;
#X obj 414 311 s currentSelectedIndexSP7;
#X floatatom 636 394 5 0 0 0 - - -;
#X obj 636 372 r indexCorrectionForLoopingSP7;
#N canvas 0 101 1015 566 My_RSP_Looping_Index_Handler7 0;
#X text 603 28 29th August 2018 This subpatch receives a bang on its
inlet \, when the currently played sample has reached its end. This
subpatch then checks if the currently playing sample is still selected
by the user or not. If not \, there has to be sent an index correction
to the zl nth objects of the parent patch ("RSP_SelectAndPlayEngine")
in order to loop the currently playing sample;
#X obj 131 301 ==;
#X floatatom 146 278 5 0 0 0 - - -;
#X floatatom 146 158 5 0 0 0 - - -;
#X obj 131 186 f;
#X floatatom 131 328 5 0 0 0 - - -;
#X obj 146 240 t f f;
#X obj 131 410 f;
#X obj 131 356 moses 1;
#X text 213 253 if the currentSelectedIndex is not equal to the lastPlayedIndex
\, then moses receives a 0 and bangs at its left outlet. In this case
we have to send indexCorrectionforLooping (==the lastPlayedIndex) in
front of the zl nth objects above. By this \, the sample that is currently
playing is looped when it has reached its end. Otherwise the system
would always play the currently selected sample \, which might be different
from the currently played sample because the user might have chosen
another sample in the meantime \;;
#X floatatom 176 478 5 0 0 0 - - -;
#X obj 131 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 270 443 f;
#X floatatom 297 443 5 0 0 0 - - -;
#X obj 170 407 t b b;
#X obj 170 383 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 131 442 t f b f;
#X obj 131 31 inlet currentSampleHasReachedItsEnd7;
#X obj 146 132 r currentSelectedIndexSP7;
#X obj 146 209 r lastIndexPlayedSP7;
#X obj 285 419 r currentSelectedIndexSP7;
#X obj 270 465 print SP7: loopingFire7 playing currently selected sample
;
#X obj 170 499 s indexCorrectionForLoopingSP7;
#X obj 150 519 s loopingFire7;
#X obj 131 541 print SP7: loopingFire7 with index correction to;
#X connect 1 0 5 0;
#X connect 2 0 1 1;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X connect 5 0 8 0;
#X connect 6 0 2 0;
#X connect 6 1 7 1;
#X connect 7 0 16 0;
#X connect 8 0 11 0;
#X connect 8 1 15 0;
#X connect 11 0 7 0;
#X connect 12 0 21 0;
#X connect 14 0 12 0;
#X connect 14 1 23 0;
#X connect 15 0 14 0;
#X connect 16 0 24 0;
#X connect 16 1 23 0;
#X connect 16 2 10 0;
#X connect 16 2 22 0;
#X connect 17 0 4 0;
#X connect 18 0 3 0;
#X connect 19 0 6 0;
#X connect 20 0 12 1;
#X connect 20 0 13 0;
#X restore 270 1026 pd My_RSP_Looping_Index_Handler7;
#X floatatom 194 900 5 0 0 0 - - -;
#X obj 194 875 moses 0.98;
#X connect 0 0 2 0;
#X connect 1 0 3 1;
#X connect 1 0 14 0;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 3 0 11 0;
#X connect 3 0 49 0;
#X connect 4 0 0 1;
#X connect 4 1 1 1;
#X connect 4 2 39 0;
#X connect 5 0 43 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 8 0 4 0;
#X connect 9 0 10 0;
#X connect 9 1 29 0;
#X connect 9 2 28 0;
#X connect 9 3 27 0;
#X connect 10 0 2 1;
#X connect 11 0 13 0;
#X connect 12 0 11 0;
#X connect 13 0 42 0;
#X connect 14 0 50 1;
#X connect 24 0 9 0;
#X connect 25 0 31 0;
#X connect 26 0 31 1;
#X connect 30 0 31 2;
#X connect 31 0 33 0;
#X connect 31 0 69 0;
#X connect 31 1 32 0;
#X connect 31 1 69 0;
#X connect 31 2 23 0;
#X connect 31 2 73 0;
#X connect 34 0 8 0;
#X connect 35 0 0 0;
#X connect 36 0 0 0;
#X connect 37 0 1 0;
#X connect 38 0 1 0;
#X connect 39 0 7 0;
#X connect 39 0 12 0;
#X connect 40 0 13 1;
#X connect 40 0 5 1;
#X connect 44 0 2 0;
#X connect 46 0 44 0;
#X connect 48 0 49 0;
#X connect 49 0 50 0;
#X connect 50 0 80 0;
#X connect 57 0 58 0;
#X connect 58 0 78 0;
#X connect 59 0 60 1;
#X connect 60 0 61 0;
#X connect 61 0 66 0;
#X connect 61 1 57 0;
#X connect 61 2 59 0;
#X connect 62 0 65 0;
#X connect 64 0 60 1;
#X connect 66 0 62 0;
#X connect 67 0 31 0;
#X connect 70 0 8 1;
#X connect 73 0 75 0;
#X connect 73 1 70 1;
#X connect 74 0 70 0;
#X connect 77 0 76 0;
#X connect 77 0 8 1;
#X connect 80 0 79 0;
#X connect 80 1 60 0;
#X restore 1845 476 pd My_RSP_SelectAndPlayEngine7;
#X obj 1845 23 inlet metronomeInlet7;
#N canvas 0 51 1280 643 My_RSP_TimeHandler8 0;
#X msg 65 115 1;
#X obj 50 168 f;
#X msg 84 168 0;
#X obj 50 194 moses 1;
#X text 453 110 This patch handles the humans \; wish to play his selected
audio \; file \, so that playback is only \; done when the metronom
has reached \; the first beat \; (just like in ableton live);
#X obj 84 145 r initBang;
#X obj 50 37 inlet myMetronomeFirstHit1_8;
#X obj 239 39 inlet myHumanDesiresPlayingSaver8;
#X obj 89 298 outlet myPermissionToPlay8;
#X obj 483 39 inlet myCurrentSampleDesiresLooping8;
#X text 454 182 The third inlet is for looping the sample that is currently
played.;
#X text 96 247 here we distinguish between the user pressing the playbutton
and the internal looping mechanism.;
#N canvas 0 50 601 288 My_RSP_PlaywishDistinguisher8 0;
#X obj 54 96 bang;
#X obj 54 123 f;
#X msg 188 90 0;
#X msg 360 86 1;
#X obj 54 154 moses 1;
#X obj 54 175 t b b;
#X obj 54 44 inlet myReadyToPlay8;
#X obj 188 44 inlet myHumanIdentifier8;
#X obj 360 43 inlet myLoopingIdentifier8;
#X obj 54 226 s currentPlayingSampleNameBang8;
#X obj 325 225 outlet myPlaybackBang8;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 1 1;
#X connect 4 0 5 0;
#X connect 4 1 10 0;
#X connect 5 0 9 0;
#X connect 5 1 10 0;
#X connect 6 0 0 0;
#X connect 7 0 2 0;
#X connect 8 0 3 0;
#X restore 89 223 pd My_RSP_PlaywishDistinguisher8;
#X obj 239 60 t b b;
#X obj 483 60 t b b;
#X connect 0 0 1 1;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 1 12 0;
#X connect 5 0 2 0;
#X connect 6 0 1 0;
#X connect 7 0 13 0;
#X connect 9 0 14 0;
#X connect 12 0 8 0;
#X connect 13 0 0 0;
#X connect 13 1 12 1;
#X connect 14 0 0 0;
#X connect 14 1 12 2;
#X restore 2137 383 pd My_RSP_TimeHandler8;
#X obj 2225 455 r sU8;
#X obj 2314 454 r sD8;
#N canvas 0 52 911 612 My_RSP_SelectAndPlayEngine8 0;
#X obj 265 501 zl nth;
#X obj 385 588 zl nth;
#X obj 265 574 phasor~;
#X obj 266 614 *~;
#X obj 399 414 t f f f;
#X obj 511 752 *~;
#X obj 511 698 tabread4~ \$1;
#X msg 662 609 set \$1_right;
#X obj 399 389 f;
#X obj 64 107 t b b b b;
#X msg 64 207 0;
#X obj 363 699 tabread4~ \$1;
#X msg 571 608 set \$1_left;
#X obj 362 751 *~;
#X floatatom 385 614 10 0 0 0 - - -;
#X text 464 142 generate an index between 1 and max number of audio
files \; in folder "samplepack1" to select one audio file to play.
;
#X text 476 414 pass the index to the zl nth objects \; to determine
which values should be \; grabbed out of the value lists the next \;
time the zl nth objects are banged by the \; "playbang (pb1_n).;
#X text 175 132 pb = playbang;
#X text 91 200 start playing \; the audio file;
#X text 451 577 grab number of \; samples of the \; selected audio
file;
#X text 167 505 grab frequency \; for phasor \; according to the \;
selected audio \; file;
#X text 757 614 build array name \; containing the \; selected index
\; so the tabread object \; knows which array \; to read from.;
#X text 590 8 13th April 2018 \; This patch plays the audio files in
the \; SamplePack2 folder. The desired audio file \; is selected by
an index. The index can be \; changed by the 2nd and 3rd inlet (e.g.
by \; the computer's keys or hid input). A bang on the first inlet
plays the selected \; audio file. \; \; OUTLETS: Audio output for dac
object (left and right);
#X floatatom 451 160 5 0 0 0 - - -;
#X msg 71 557 0;
#X text 30 507 stop playing;
#X obj 71 532 r stopAll;
#X obj 64 7 inlet playButton8;
#X obj 267 9 inlet selectUp8;
#X obj 381 10 inlet selectDown8;
#X obj 115 130 s pb1_1_8;
#X obj 98 153 s pb1_2_8;
#X obj 81 177 s pb1_3_8;
#N canvas 71 94 553 615 My_RSP_IndexGenerator8 0;
#X obj 129 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 163 134 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 129 222 moses;
#X obj 201 205 / 2;
#X msg 129 173 1;
#X obj 129 283 +;
#X obj 159 283 f;
#X obj 322 312 clip;
#X obj 305 143 t b b;
#X obj 305 118 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 332 239 1;
#X obj 156 253 -;
#X obj 163 173 f;
#X obj 193 173 - 1;
#X floatatom 223 393 5 0 0 0 - - -;
#X obj 223 371 <= 0;
#X obj 129 349 >;
#X obj 129 471 spigot;
#X obj 129 447 f;
#X obj 129 374 t b f;
#X obj 223 433 t b f;
#X obj 223 454 f;
#X obj 223 480 spigot;
#X obj 305 188 f;
#X floatatom 332 189 5 0 0 0 - - -;
#X text 590 36 This patch puts out the desired index number which controls
the desired audiosample to be played. \; inlets: \; left: increase
index \; middle: decrease index \; right: init the patch with the max
number of audio files \; Before the patch is init-banged \, it has
to receive "AmountOfAudioSamplesInSP1 to know the max number the index
is allowed to be \; outlets \; left: bang when the maximum index is
reached \; middle: bang when the minimum index is reached \; right:
current index;
#X text 426 384 output the index;
#X text 403 527 output warning bang (first index reached);
#X text 302 550 output warning bang (last index reached);
#X obj 129 36 inlet increaseIndexSP8;
#X obj 163 62 inlet decreaseIndexSP8;
#X obj 305 89 inlet bangToInitWithNumberOfIndexes8;
#X text 11 104 increase \; SamplePack8Index;
#X text 175 108 decrease \; SamplePack8Index;
#X obj 193 152 r maxNoOfSamples8;
#X obj 320 166 r AmountOfAudioFilesInSP8;
#X obj 171 230 r maxNoOfSamples8;
#X obj 305 212 s maxNoOfSamples8;
#X obj 144 325 r maxNoOfSamples8;
#X obj 372 289 r maxNoOfSamples8;
#X obj 259 345 s sP8Index;
#X obj 322 386 outlet SP8_Index;
#X obj 144 414 r sP8Index;
#X obj 278 437 r sP8Index;
#X obj 223 523 outlet FirstSampleReachedSP8;
#X obj 129 549 outlet LastSampleReachedSP8;
#X connect 0 0 4 0;
#X connect 1 0 12 0;
#X connect 2 0 5 0;
#X connect 2 1 11 0;
#X connect 3 0 2 1;
#X connect 4 0 2 0;
#X connect 5 0 7 0;
#X connect 5 0 15 0;
#X connect 5 0 16 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X connect 7 0 40 0;
#X connect 7 0 41 0;
#X connect 8 0 23 0;
#X connect 8 1 10 0;
#X connect 9 0 8 0;
#X connect 10 0 7 1;
#X connect 11 0 5 0;
#X connect 12 0 2 0;
#X connect 13 0 12 1;
#X connect 14 0 20 0;
#X connect 15 0 14 0;
#X connect 16 0 19 0;
#X connect 17 0 45 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X connect 19 1 17 1;
#X connect 20 0 21 0;
#X connect 20 1 22 1;
#X connect 21 0 22 0;
#X connect 22 0 44 0;
#X connect 23 0 3 0;
#X connect 23 0 37 0;
#X connect 29 0 0 0;
#X connect 30 0 1 0;
#X connect 31 0 9 0;
#X connect 34 0 13 0;
#X connect 35 0 23 1;
#X connect 35 0 24 0;
#X connect 36 0 11 1;
#X connect 38 0 16 1;
#X connect 39 0 7 2;
#X connect 42 0 18 1;
#X connect 43 0 21 1;
#X restore 267 143 pd My_RSP_IndexGenerator8;
#X obj 414 111 r initIndexBang8;
#X obj 340 193 print SP8>>First Sample Reached;
#X obj 267 217 print SP8>>Last Sample Reached;
#X obj 399 367 r pb1_1_8;
#X obj 265 465 r listValuesForPhasor8;
#X obj 211 484 r pb1_3_8;
#X obj 385 536 r listNumberOfSamplesOfEachAudioFile8;
#X obj 395 556 r pb1_2_8;
#X obj 571 583 makefilename SampleArray8_%d;
#X obj 377 725 r vol8;
#X text 426 721 adjust volume \; (from fader 8);
#X obj 362 771 outlet~ toDacLeft8;
#X obj 511 774 outlet~ toDacRight8;
#X text 460 803 AUDIO OUTPUT;
#X obj 204 676 r metroHits;
#X obj 204 703 snapshot~;
#X obj 204 749 /;
#X text 9 726 divide by the number of \; samples of the currently \;
playing audio file to make the \; position a value between 0 and 1
;
#X text 11 787 output on the right outlet \; if the end is almost reached.
;
#X text 8 671 get the metronome's 16th notes;
#X text 10 693 get position of the \; currently playing sample;
#X text 31 648 ***SYNCING PLAYBACK TO METRONOME***;
#X floatatom 280 903 5 0 0 0 - - -;
#X obj 280 930 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 323 843 0;
#X obj 261 843 spigot 1;
#X obj 261 873 t b f b;
#X msg 261 999 1;
#X text 333 877 here we only let the first value \; of the moses' right
output come trough;
#X obj 306 816 r openSpigot8;
#X obj 261 1023 s openSpigot8;
#X text 48 836 send a wish for playback \; which will ONLY BE ACKNOWLEGDED
\; by the metronome:);
#X obj 261 974 delay 2000;
#X floatatom 212 817 5 0 0 0 - - -;
#X obj 275 115 r indexInit;
#X text 273 66 select first \; sample after \; loading the patch;
#N canvas 329 283 450 300 My_RSP_LedAlert 0;
#X text 199 46 this patch toggles the blue led \; on gpio24 to show
that the first or last \; sample is reached.;
#X obj 71 150 wiringPi_gpio 24 0 0;
#X msg 71 119 1;
#X obj 44 85 t b b;
#X msg 44 217 0;
#X obj 44 186 delay 100;
#X obj 44 30 inlet alertBang;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 3 1 2 0;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 6 0 3 0;
#X restore 218 239 pd My_RSP_LedAlert;
#X obj 469 297 f;
#X text 503 298 store current selected index;
#X text 574 313 send currentSelectedIndex to subpatch "Looping_Index_Handler"
and to parent patch;
#X obj 414 259 t f f;
#X obj 469 259 r updateZlnthObjectsBang8;
#X obj 414 321 s currentSelectedIndexSP8;
#X floatatom 616 394 5 0 0 0 - - -;
#X obj 616 372 r indexCorrectionForLoopingSP8;
#N canvas 0 101 1015 566 My_RSP_Looping_Index_Handler8 0;
#X text 603 28 29th August 2018 This subpatch receives a bang on its
inlet \, when the currently played sample has reached its end. This
subpatch then checks if the currently playing sample is still selected
by the user or not. If not \, there has to be sent an index correction
to the zl nth objects of the parent patch ("RSP_SelectAndPlayEngine")
in order to loop the currently playing sample;
#X obj 131 301 ==;
#X floatatom 146 278 5 0 0 0 - - -;
#X floatatom 146 158 5 0 0 0 - - -;
#X obj 131 186 f;
#X floatatom 131 328 5 0 0 0 - - -;
#X obj 146 240 t f f;
#X obj 131 410 f;
#X obj 131 356 moses 1;
#X text 203 243 if the currentSelectedIndex is not equal to the lastPlayedIndex
\, then moses receives a 0 and bangs at its left outlet. In this case
we have to send indexCorrectionforLooping (==the lastPlayedIndex) in
front of the zl nth objects above. By this \, the sample that is currently
playing is looped when it has reached its end. Otherwise the system
would always play the currently selected sample \, which might be different
from the currently played sample because the user might have chosen
another sample in the meantime \;;
#X floatatom 176 478 5 0 0 0 - - -;
#X obj 131 382 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 270 443 f;
#X floatatom 297 443 5 0 0 0 - - -;
#X obj 170 407 t b b;
#X obj 170 383 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 131 442 t f b f;
#X obj 131 31 inlet currentSampleHasReachedItsEnd8;
#X obj 146 132 r currentSelectedIndexSP8;
#X obj 146 209 r lastIndexPlayedSP8;
#X obj 285 419 r currentSelectedIndexSP8;
#X obj 270 465 print SP8: loopingFire8 playing currently selected sample
;
#X obj 170 499 s indexCorrectionForLoopingSP8;
#X obj 150 519 s loopingFire8;
#X obj 131 541 print SP8: loopingFire8 with index correction to;
#X connect 1 0 5 0;
#X connect 2 0 1 1;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X connect 5 0 8 0;
#X connect 6 0 2 0;
#X connect 6 1 7 1;
#X connect 7 0 16 0;
#X connect 8 0 11 0;
#X connect 8 1 15 0;
#X connect 11 0 7 0;
#X connect 12 0 21 0;
#X connect 14 0 12 0;
#X connect 14 1 23 0;
#X connect 15 0 14 0;
#X connect 16 0 24 0;
#X connect 16 1 23 0;
#X connect 16 2 10 0;
#X connect 16 2 22 0;
#X connect 17 0 4 0;
#X connect 18 0 3 0;
#X connect 19 0 6 0;
#X connect 20 0 12 1;
#X connect 20 0 13 0;
#X restore 280 950 pd My_RSP_Looping_Index_Handler8;
#X obj 204 795 moses 0.98;
#X connect 0 0 2 0;
#X connect 1 0 3 1;
#X connect 1 0 14 0;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 3 0 11 0;
#X connect 3 0 49 0;
#X connect 4 0 0 1;
#X connect 4 1 1 1;
#X connect 4 2 42 0;
#X connect 5 0 46 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 8 0 4 0;
#X connect 9 0 10 0;
#X connect 9 1 32 0;
#X connect 9 2 31 0;
#X connect 9 3 30 0;
#X connect 10 0 2 1;
#X connect 11 0 13 0;
#X connect 12 0 11 0;
#X connect 13 0 45 0;
#X connect 14 0 50 1;
#X connect 24 0 2 0;
#X connect 26 0 24 0;
#X connect 27 0 9 0;
#X connect 28 0 33 0;
#X connect 29 0 33 1;
#X connect 33 0 36 0;
#X connect 33 0 70 0;
#X connect 33 1 35 0;
#X connect 33 1 70 0;
#X connect 33 2 23 0;
#X connect 33 2 74 0;
#X connect 34 0 33 2;
#X connect 37 0 8 0;
#X connect 38 0 0 0;
#X connect 39 0 0 0;
#X connect 40 0 1 0;
#X connect 41 0 1 0;
#X connect 42 0 7 0;
#X connect 42 0 12 0;
#X connect 43 0 13 1;
#X connect 43 0 5 1;
#X connect 48 0 49 0;
#X connect 49 0 50 0;
#X connect 50 0 80 0;
#X connect 56 0 57 0;
#X connect 57 0 79 0;
#X connect 58 0 59 1;
#X connect 59 0 60 0;
#X connect 60 0 66 0;
#X connect 60 1 56 0;
#X connect 60 2 58 0;
#X connect 61 0 64 0;
#X connect 63 0 59 1;
#X connect 66 0 61 0;
#X connect 68 0 33 0;
#X connect 71 0 8 1;
#X connect 74 0 76 0;
#X connect 74 1 71 1;
#X connect 75 0 71 0;
#X connect 78 0 77 0;
#X connect 78 0 8 1;
#X connect 80 0 67 0;
#X connect 80 1 59 0;
#X restore 2137 478 pd My_RSP_SelectAndPlayEngine8;
#X obj 2137 24 inlet metronomeInlet8;
#X obj -102 154 r currentSelectedIndexSP1;
#X obj -117 178 f;
#X floatatom -70 178 5 0 0 0 - - -;
#X obj -98 330 s lastIndexPlayedSP1;
#X obj -52 352 r loopingFire1;
#X text -17 209 fireN is the human pressing the \; play-button and
bangs the second input of the "RSP_Timehandler"-Subpatches. When the
human does \; that \, we remember the index of the \; actual sample
\, that should be played. This index is needed in the "RSP_Timehandler"-Subpatches
below \, in order to keep looping the sample that is currently played.
;
#X text -21 374 loopingFireN bangs the RSP_Timehandler_Subpatches in
order to loop the sample that is currently played;
#X obj 456 190 f;
#X floatatom 503 190 5 0 0 0 - - -;
#X obj 456 141 r fire2;
#X obj 471 166 r currentSelectedIndexSP2;
#X obj 475 314 s lastIndexPlayedSP2;
#X obj 521 363 r loopingFire2;
#X obj 748 204 f;
#X floatatom 795 204 5 0 0 0 - - -;
#X obj 763 180 r currentSelectedIndexSP3;
#X obj 767 306 s lastIndexPlayedSP3;
#X obj 748 155 r fire3;
#X obj 813 359 r loopingFire3;
#X obj 1051 199 f;
#X floatatom 1098 199 5 0 0 0 - - -;
#X obj 1116 356 r loopingFire4;
#X obj 1051 150 r fire4;
#X obj 1066 175 r currentSelectedIndexSP4;
#X obj 1070 307 s lastIndexPlayedSP4;
#X obj -117 277 t b f b;
#X obj -78 306 s updateZlnthObjectsBang1;
#X obj 495 290 s updateZlnthObjectsBang2;
#X obj 748 257 t b f b;
#X obj 787 283 s updateZlnthObjectsBang3;
#X obj 1051 252 t b f b;
#X obj 1090 283 s updateZlnthObjectsBang4;
#X obj 1309 219 f;
#X floatatom 1349 220 5 0 0 0 - - -;
#X obj 1309 252 t b f b;
#X obj 1324 194 r currentSelectedIndexSP5;
#X obj 1348 283 s updateZlnthObjectsBang5;
#X obj 1328 307 s lastIndexPlayedSP5;
#X obj 1374 352 r loopingFire5;
#X obj 1570 219 f;
#X floatatom 1610 220 5 0 0 0 - - -;
#X obj 1570 252 t b f b;
#X obj 1570 167 r fire6;
#X obj 1585 194 r currentSelectedIndexSP6;
#X obj 1609 283 s updateZlnthObjectsBang6;
#X obj 1589 307 s lastIndexPlayedSP6;
#X obj 1635 352 r loopingFire6;
#X obj 1909 229 f;
#X floatatom 1946 229 5 0 0 0 - - -;
#X obj 1909 262 t b f b;
#X obj 1924 204 r currentSelectedIndexSP7;
#X obj 1909 177 r fire7;
#X obj 1948 293 s updateZlnthObjectsBang7;
#X obj 1928 317 s lastIndexPlayedSP7;
#X obj 1974 353 r loopingFire7;
#X obj 2201 239 f;
#X floatatom 2238 239 5 0 0 0 - - -;
#X obj 2201 272 t b f b;
#X obj 2201 187 r fire8;
#X obj 2216 214 r currentSelectedIndexSP8;
#X obj 2240 303 s updateZlnthObjectsBang8;
#X obj 2220 327 s lastIndexPlayedSP8;
#X obj 2266 356 r loopingFire8;
#X obj 392 513 hip~ 1;
#X obj 436 513 hip~ 1;
#X obj -180 491 hip~ 1;
#X obj -136 491 hip~ 1;
#X obj 683 483 hip~ 1;
#X obj 728 483 hip~ 1;
#X obj 987 493 hip~ 1;
#X obj 1032 493 hip~ 1;
#X obj 1245 487 hip~ 1;
#X obj 1290 487 hip~ 1;
#X obj 1505 491 hip~ 1;
#X obj 1550 491 hip~ 1;
#X obj 1845 536 dac~ 1 2;
#X obj 1844 507 hip~ 1;
#X obj 1889 507 hip~ 1;
#X obj 2137 543 dac~ 1 2;
#X obj 2136 514 hip~ 1;
#X obj 2181 514 hip~ 1;
#X obj 456 255 t b f b;
#N canvas 187 190 911 465 My_RSP_SampleNameDisplay2 0;
#X obj 240 -267 zl nth;
#X obj 240 -481 r listFileNames2;
#X obj 356 -329 r currentSelectedIndexSP2;
#X obj 18 -328 r currentPlayingSampleNameBang2;
#X obj 356 -308 t b b f;
#X obj 18 -307 t b b;
#X msg 535 -60 \; SP2CurrentlySelected label \$1;
#X msg 240 -57 \; SP2CurrentlyPlaying label \$1;
#X msg 45 -279 0;
#X obj 240 -237 pack s f;
#X msg 375 -274 1;
#X msg 240 -212 \$2 \$1;
#X obj 240 -160 symbol;
#X msg 240 -80 label \$1;
#X obj 240 -183 route 0 1, f 99;
#X obj 535 -150 symbol;
#X msg 535 -85 label \$1;
#X text 317 -227 route the list (e.g. 0 vibrawusel or 1 vibrawusel)
\, depending on whether the playbutton is pressed or the encoder is
turned in order to select another sample.;
#X text 353 -348 sample index comes in here;
#X text 15 -355 this is hit when the play button \; is pressed;
#X text 256 -453 receiving a list of filenames \; for SamplePackXY
;
#X obj 535 -129 t s s, f 35;
#X obj 742 8 outlet selectedSample2;
#X text 519 -505 14th February 2019 \; This subpatch collects all \;
sample names in ../SamplePackXY \; within the zl nth object. When the
user selectes a new sample \; by turning a knob \, the currently selected
\; sample name is displayed in the main parent patch as "currently
selected". When the user presses a play button \, the sample name that
is then played is also shown in the main parent patch as "currently
playing". \; The names of the currently playing and currently selected
samples are important for the notification of non-harmonic samples.
The sample names are output to the next subpatch where the latter is
implemented.;
#X obj 240 -139 t s s, f 34;
#X obj 441 5 outlet startingSample2;
#X connect 0 0 9 0;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 3 0 5 0;
#X connect 4 0 0 0;
#X connect 4 1 10 0;
#X connect 4 2 0 1;
#X connect 5 0 0 0;
#X connect 5 1 8 0;
#X connect 8 0 9 1;
#X connect 9 0 11 0;
#X connect 10 0 9 1;
#X connect 11 0 14 0;
#X connect 12 0 24 0;
#X connect 13 0 7 0;
#X connect 14 0 12 0;
#X connect 14 1 15 0;
#X connect 15 0 21 0;
#X connect 16 0 6 0;
#X connect 21 0 16 0;
#X connect 21 1 22 0;
#X connect 24 0 13 0;
#X connect 24 1 25 0;
#X restore 391 588 pd My_RSP_SampleNameDisplay2;
#N canvas 187 190 911 465 My_RSP_SampleNameDisplay1 0;
#X obj 240 -267 zl nth;
#X obj 356 -308 t b b f;
#X obj 18 -307 t b b;
#X msg 45 -279 0;
#X obj 240 -237 pack s f;
#X msg 375 -274 1;
#X msg 240 -212 \$2 \$1;
#X text 307 -207 route the list (e.g. 0 vibrawusel or 1 vibrawusel)
\, depending on whether the playbutton is pressed or the encoder is
turned in order to select another sample.;
#X text 353 -348 sample index comes in here;
#X text 15 -355 this is hit when the play button \; is pressed;
#X text 256 -453 receiving a list of filenames \; for SamplePackXY
;
#X obj 240 -481 r listFileNames1;
#X obj 18 -328 r currentPlayingSampleNameBang1;
#X obj 356 -329 r currentSelectedIndexSP1;
#X text 519 -505 14th February 2019 \; This subpatch collects all \;
sample names in ../SamplePackXY \; within the zl nth object. When the
user selectes a new sample \; by turning a knob \, the currently selected
\; sample name is displayed in the main parent patch as "currently
selected". When the user presses a play button \, the sample name that
is then played is also played in the main parent patch as "currently
playing". \; The names of the currently playing and currently selected
samples are important for the notification of non-harmonic samples.
The sample names are output to the next subpatch where the latter is
implemented.;
#X obj 240 -142 symbol;
#X msg 240 -62 label \$1;
#X obj 240 -165 route 0 1, f 99;
#X obj 535 -132 symbol;
#X msg 535 -67 label \$1;
#X obj 535 -111 t s s, f 35;
#X obj 240 -121 t s s, f 34;
#X msg 240 -39 \; SP1CurrentlyPlaying label \$1;
#X msg 535 -42 \; SP1CurrentlySelected label \$1;
#X obj 441 5 outlet startingSample1;
#X obj 742 8 outlet selectedSample1;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 1 1 5 0;
#X connect 1 2 0 1;
#X connect 2 0 0 0;
#X connect 2 1 3 0;
#X connect 3 0 4 1;
#X connect 4 0 6 0;
#X connect 5 0 4 1;
#X connect 6 0 17 0;
#X connect 11 0 0 0;
#X connect 12 0 2 0;
#X connect 13 0 1 0;
#X connect 15 0 21 0;
#X connect 16 0 22 0;
#X connect 17 0 15 0;
#X connect 17 1 18 0;
#X connect 18 0 20 0;
#X connect 19 0 23 0;
#X connect 20 0 19 0;
#X connect 20 1 25 0;
#X connect 21 0 16 0;
#X connect 21 1 24 0;
#X restore -178 587 pd My_RSP_SampleNameDisplay1;
#N canvas 187 190 911 465 My_RSP_SampleNameDisplay3 0;
#X obj 240 -267 zl nth;
#X obj 356 -308 t b b f;
#X obj 18 -307 t b b;
#X msg 45 -279 0;
#X obj 240 -237 pack s f;
#X msg 375 -274 1;
#X msg 240 -212 \$2 \$1;
#X text 307 -227 route the list (e.g. 0 vibrawusel or 1 vibrawusel)
\, depending on whether the playbutton is pressed or the encoder is
turned in order to select another sample.;
#X text 353 -348 sample index comes in here;
#X text 15 -355 this is hit when the play button \; is pressed;
#X text 256 -453 receiving a list of filenames \; for SamplePackXY
;
#X obj 240 -481 r listFileNames3;
#X obj 18 -328 r currentPlayingSampleNameBang3;
#X obj 356 -329 r currentSelectedIndexSP3;
#X text 519 -505 14th February 2019 \; This subpatch collects all \;
sample names in ../SamplePackXY \; within the zl nth object. When the
user selectes a new sample \; by turning a knob \, the currently selected
\; sample name is displayed in the main parent patch as "currently
selected". When the user presses a play button \, the sample name that
is then played is also played in the main parent patch as "currently
playing". \; The names of the currently playing and currently selected
samples are important for the notification of non-harmonic samples.
The sample names are output to the next subpatch where the latter is
implemented.;
#X obj 240 -160 symbol;
#X msg 240 -80 label \$1;
#X obj 240 -183 route 0 1, f 99;
#X obj 535 -150 symbol;
#X msg 535 -85 label \$1;
#X obj 535 -129 t s s, f 35;
#X obj 240 -139 t s s, f 34;
#X msg 240 -57 \; SP3CurrentlyPlaying label \$1;
#X msg 535 -60 \; SP3CurrentlySelected label \$1;
#X obj 441 5 outlet startingSample3;
#X obj 742 8 outlet selectedSample3;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 1 1 5 0;
#X connect 1 2 0 1;
#X connect 2 0 0 0;
#X connect 2 1 3 0;
#X connect 3 0 4 1;
#X connect 4 0 6 0;
#X connect 5 0 4 1;
#X connect 6 0 17 0;
#X connect 11 0 0 0;
#X connect 12 0 2 0;
#X connect 13 0 1 0;
#X connect 15 0 21 0;
#X connect 16 0 22 0;
#X connect 17 0 15 0;
#X connect 17 1 18 0;
#X connect 18 0 20 0;
#X connect 19 0 23 0;
#X connect 20 0 19 0;
#X connect 20 1 25 0;
#X connect 21 0 16 0;
#X connect 21 1 24 0;
#X restore 681 587 pd My_RSP_SampleNameDisplay3;
#N canvas 187 190 911 465 My_RSP_SampleNameDisplay4 0;
#X obj 240 -267 zl nth;
#X obj 356 -308 t b b f;
#X obj 18 -307 t b b;
#X msg 45 -279 0;
#X obj 240 -237 pack s f;
#X msg 375 -274 1;
#X msg 240 -212 \$2 \$1;
#X text 307 -227 route the list (e.g. 0 vibrawusel or 1 vibrawusel)
\, depending on whether the playbutton is pressed or the encoder is
turned in order to select another sample.;
#X text 353 -348 sample index comes in here;
#X text 15 -355 this is hit when the play button \; is pressed;
#X text 256 -453 receiving a list of filenames \; for SamplePackXY
;
#X obj 240 -481 r listFileNames4;
#X obj 18 -328 r currentPlayingSampleNameBang4;
#X obj 356 -329 r currentSelectedIndexSP4;
#X text 519 -505 14th February 2019 \; This subpatch collects all \;
sample names in ../SamplePackXY \; within the zl nth object. When the
user selectes a new sample \; by turning a knob \, the currently selected
\; sample name is displayed in the main parent patch as "currently
selected". When the user presses a play button \, the sample name that
is then played is also played in the main parent patch as "currently
playing". \; The names of the currently playing and currently selected
samples are important for the notification of non-harmonic samples.
The sample names are output to the next subpatch where the latter is
implemented.;
#X obj 240 -160 symbol;
#X msg 240 -80 label \$1;
#X obj 240 -183 route 0 1, f 99;
#X obj 535 -150 symbol;
#X msg 535 -85 label \$1;
#X obj 535 -129 t s s, f 35;
#X obj 240 -139 t s s, f 34;
#X msg 240 -57 \; SP4CurrentlyPlaying label \$1;
#X msg 535 -60 \; SP4CurrentlySelected label \$1;
#X obj 441 5 outlet startingSample4;
#X obj 742 8 outlet selectedSample4;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 1 1 5 0;
#X connect 1 2 0 1;
#X connect 2 0 0 0;
#X connect 2 1 3 0;
#X connect 3 0 4 1;
#X connect 4 0 6 0;
#X connect 5 0 4 1;
#X connect 6 0 17 0;
#X connect 11 0 0 0;
#X connect 12 0 2 0;
#X connect 13 0 1 0;
#X connect 15 0 21 0;
#X connect 16 0 22 0;
#X connect 17 0 15 0;
#X connect 17 1 18 0;
#X connect 18 0 20 0;
#X connect 19 0 23 0;
#X connect 20 0 19 0;
#X connect 20 1 25 0;
#X connect 21 0 16 0;
#X connect 21 1 24 0;
#X restore 981 586 pd My_RSP_SampleNameDisplay4;
#N canvas 187 190 911 465 My_RSP_SampleNameDisplay5 0;
#X obj 240 -267 zl nth;
#X obj 356 -308 t b b f;
#X obj 18 -307 t b b;
#X msg 45 -279 0;
#X obj 240 -237 pack s f;
#X msg 375 -274 1;
#X msg 240 -212 \$2 \$1;
#X text 307 -227 route the list (e.g. 0 vibrawusel or 1 vibrawusel)
\, depending on whether the playbutton is pressed or the encoder is
turned in order to select another sample.;
#X text 353 -348 sample index comes in here;
#X text 15 -355 this is hit when the play button \; is pressed;
#X text 256 -453 receiving a list of filenames \; for SamplePackXY
;
#X obj 240 -481 r listFileNames5;
#X obj 18 -328 r currentPlayingSampleNameBang5;
#X obj 356 -329 r currentSelectedIndexSP5;
#X text 519 -505 14th February 2019 \; This subpatch collects all \;
sample names in ../SamplePackXY \; within the zl nth object. When the
user selectes a new sample \; by turning a knob \, the currently selected
\; sample name is displayed in the main parent patch as "currently
selected". When the user presses a play button \, the sample name that
is then played is also played in the main parent patch as "currently
playing". \; The names of the currently playing and currently selected
samples are important for the notification of non-harmonic samples.
The sample names are output to the next subpatch where the latter is
implemented.;
#X obj 240 -160 symbol;
#X msg 240 -80 label \$1;
#X obj 240 -183 route 0 1, f 99;
#X obj 535 -150 symbol;
#X msg 535 -85 label \$1;
#X obj 535 -129 t s s, f 35;
#X obj 240 -139 t s s, f 34;
#X msg 240 -57 \; SP5CurrentlyPlaying label \$1;
#X msg 535 -60 \; SP5CurrentlySelected label \$1;
#X obj 441 5 outlet startingSample5;
#X obj 742 8 outlet selectedSample5;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 1 1 5 0;
#X connect 1 2 0 1;
#X connect 2 0 0 0;
#X connect 2 1 3 0;
#X connect 3 0 4 1;
#X connect 4 0 6 0;
#X connect 5 0 4 1;
#X connect 6 0 17 0;
#X connect 11 0 0 0;
#X connect 12 0 2 0;
#X connect 13 0 1 0;
#X connect 15 0 21 0;
#X connect 16 0 22 0;
#X connect 17 0 15 0;
#X connect 17 1 18 0;
#X connect 18 0 20 0;
#X connect 19 0 23 0;
#X connect 20 0 19 0;
#X connect 20 1 25 0;
#X connect 21 0 16 0;
#X connect 21 1 24 0;
#X restore 1243 595 pd My_RSP_SampleNameDisplay5;
#N canvas 187 190 911 465 My_RSP_SampleNameDisplay6 0;
#X obj 240 -267 zl nth;
#X obj 356 -308 t b b f;
#X obj 18 -307 t b b;
#X msg 45 -279 0;
#X obj 240 -237 pack s f;
#X msg 375 -274 1;
#X msg 240 -212 \$2 \$1;
#X text 307 -227 route the list (e.g. 0 vibrawusel or 1 vibrawusel)
\, depending on whether the playbutton is pressed or the encoder is
turned in order to select another sample.;
#X text 353 -348 sample index comes in here;
#X text 15 -355 this is hit when the play button \; is pressed;
#X text 256 -453 receiving a list of filenames \; for SamplePackXY
;
#X obj 240 -481 r listFileNames6;
#X obj 18 -328 r currentPlayingSampleNameBang6;
#X obj 356 -329 r currentSelectedIndexSP6;
#X text 519 -505 14th February 2019 \; This subpatch collects all \;
sample names in ../SamplePackXY \; within the zl nth object. When the
user selectes a new sample \; by turning a knob \, the currently selected
\; sample name is displayed in the main parent patch as "currently
selected". When the user presses a play button \, the sample name that
is then played is also played in the main parent patch as "currently
playing". \; The names of the currently playing and currently selected
samples are important for the notification of non-harmonic samples.
The sample names are output to the next subpatch where the latter is
implemented.;
#X obj 240 -160 symbol;
#X msg 240 -80 label \$1;
#X obj 240 -183 route 0 1, f 99;
#X obj 535 -150 symbol;
#X msg 535 -85 label \$1;
#X obj 535 -129 t s s, f 35;
#X obj 240 -139 t s s, f 34;
#X msg 240 -57 \; SP6CurrentlyPlaying label \$1;
#X msg 535 -60 \; SP6CurrentlySelected label \$1;
#X obj 441 5 outlet startingSample6;
#X obj 742 8 outlet selectedSample6;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 1 1 5 0;
#X connect 1 2 0 1;
#X connect 2 0 0 0;
#X connect 2 1 3 0;
#X connect 3 0 4 1;
#X connect 4 0 6 0;
#X connect 5 0 4 1;
#X connect 6 0 17 0;
#X connect 11 0 0 0;
#X connect 12 0 2 0;
#X connect 13 0 1 0;
#X connect 15 0 21 0;
#X connect 16 0 22 0;
#X connect 17 0 15 0;
#X connect 17 1 18 0;
#X connect 18 0 20 0;
#X connect 19 0 23 0;
#X connect 20 0 19 0;
#X connect 20 1 25 0;
#X connect 21 0 16 0;
#X connect 21 1 24 0;
#X restore 1500 598 pd My_RSP_SampleNameDisplay6;
#N canvas 187 190 911 465 My_RSP_SampleNameDisplay7 0;
#X obj 240 -267 zl nth;
#X obj 356 -308 t b b f;
#X obj 18 -307 t b b;
#X msg 45 -279 0;
#X obj 240 -237 pack s f;
#X msg 375 -274 1;
#X msg 240 -212 \$2 \$1;
#X text 307 -227 route the list (e.g. 0 vibrawusel or 1 vibrawusel)
\, depending on whether the playbutton is pressed or the encoder is
turned in order to select another sample.;
#X text 353 -348 sample index comes in here;
#X text 15 -355 this is hit when the play button \; is pressed;
#X text 256 -453 receiving a list of filenames \; for SamplePackXY
;
#X obj 240 -481 r listFileNames7;
#X obj 18 -328 r currentPlayingSampleNameBang7;
#X obj 356 -329 r currentSelectedIndexSP7;
#X text 519 -505 14th February 2019 \; This subpatch collects all \;
sample names in ../SamplePackXY \; within the zl nth object. When the
user selectes a new sample \; by turning a knob \, the currently selected
\; sample name is displayed in the main parent patch as "currently
selected". When the user presses a play button \, the sample name that
is then played is also played in the main parent patch as "currently
playing". \; The names of the currently playing and currently selected
samples are important for the notification of non-harmonic samples.
The sample names are output to the next subpatch where the latter is
implemented.;
#X obj 240 -160 symbol;
#X msg 240 -80 label \$1;
#X obj 240 -183 route 0 1, f 99;
#X obj 535 -150 symbol;
#X msg 535 -85 label \$1;
#X obj 535 -129 t s s, f 35;
#X obj 240 -139 t s s, f 34;
#X msg 240 -57 \; SP7CurrentlyPlaying label \$1;
#X msg 535 -60 \; SP7CurrentlySelected label \$1;
#X obj 441 5 outlet startingSample7;
#X obj 742 8 outlet selectedSample7;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 1 1 5 0;
#X connect 1 2 0 1;
#X connect 2 0 0 0;
#X connect 2 1 3 0;
#X connect 3 0 4 1;
#X connect 4 0 6 0;
#X connect 5 0 4 1;
#X connect 6 0 17 0;
#X connect 11 0 0 0;
#X connect 12 0 2 0;
#X connect 13 0 1 0;
#X connect 15 0 21 0;
#X connect 16 0 22 0;
#X connect 17 0 15 0;
#X connect 17 1 18 0;
#X connect 18 0 20 0;
#X connect 19 0 23 0;
#X connect 20 0 19 0;
#X connect 20 1 25 0;
#X connect 21 0 16 0;
#X connect 21 1 24 0;
#X restore 1845 597 pd My_RSP_SampleNameDisplay7;
#N canvas 187 190 911 465 My_RSP_SampleNameDisplay8 0;
#X obj 240 -267 zl nth;
#X obj 356 -308 t b b f;
#X obj 18 -307 t b b;
#X msg 45 -279 0;
#X obj 240 -237 pack s f;
#X msg 375 -274 1;
#X msg 240 -212 \$2 \$1;
#X text 307 -227 route the list (e.g. 0 vibrawusel or 1 vibrawusel)
\, depending on whether the playbutton is pressed or the encoder is
turned in order to select another sample.;
#X text 353 -348 sample index comes in here;
#X text 15 -355 this is hit when the play button \; is pressed;
#X text 256 -453 receiving a list of filenames \; for SamplePackXY
;
#X obj 240 -481 r listFileNames8;
#X obj 18 -328 r currentPlayingSampleNameBang8;
#X obj 356 -329 r currentSelectedIndexSP8;
#X text 519 -505 14th February 2019 \; This subpatch collects all \;
sample names in ../SamplePackXY \; within the zl nth object. When the
user selectes a new sample \; by turning a knob \, the currently selected
\; sample name is displayed in the main parent patch as "currently
selected". When the user presses a play button \, the sample name that
is then played is also played in the main parent patch as "currently
playing". \; The names of the currently playing and currently selected
samples are important for the notification of non-harmonic samples.
The sample names are output to the next subpatch where the latter is
implemented.;
#X obj 240 -160 symbol;
#X msg 240 -80 label \$1;
#X obj 240 -183 route 0 1, f 99;
#X obj 535 -150 symbol;
#X msg 535 -85 label \$1;
#X obj 535 -129 t s s, f 35;
#X obj 240 -139 t s s, f 34;
#X msg 240 -57 \; SP8CurrentlyPlaying label \$1;
#X msg 535 -60 \; SP8CurrentlySelected label \$1;
#X obj 441 5 outlet startingSample8;
#X obj 742 8 outlet selectedSample8;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 1 1 5 0;
#X connect 1 2 0 1;
#X connect 2 0 0 0;
#X connect 2 1 3 0;
#X connect 3 0 4 1;
#X connect 4 0 6 0;
#X connect 5 0 4 1;
#X connect 6 0 17 0;
#X connect 11 0 0 0;
#X connect 12 0 2 0;
#X connect 13 0 1 0;
#X connect 15 0 21 0;
#X connect 16 0 22 0;
#X connect 17 0 15 0;
#X connect 17 1 18 0;
#X connect 18 0 20 0;
#X connect 19 0 23 0;
#X connect 20 0 19 0;
#X connect 20 1 25 0;
#X connect 21 0 16 0;
#X connect 21 1 24 0;
#X restore 2139 598 pd My_RSP_SampleNameDisplay8;
#X obj -178 684 harmonyDetection, f 422;
#X connect 0 0 116 0;
#X connect 0 1 117 0;
#X connect 3 0 0 0;
#X connect 4 0 52 0;
#X connect 5 0 0 1;
#X connect 6 0 0 2;
#X connect 7 0 3 0;
#X connect 8 0 9 0;
#X connect 9 0 12 0;
#X connect 10 0 12 1;
#X connect 11 0 12 2;
#X connect 12 0 114 0;
#X connect 12 1 115 0;
#X connect 15 0 18 0;
#X connect 16 0 19 1;
#X connect 17 0 19 2;
#X connect 18 0 19 0;
#X connect 19 0 118 0;
#X connect 19 1 119 0;
#X connect 23 0 25 1;
#X connect 24 0 25 2;
#X connect 25 0 120 0;
#X connect 25 1 121 0;
#X connect 26 0 25 0;
#X connect 27 0 26 0;
#X connect 29 0 83 0;
#X connect 30 0 33 0;
#X connect 31 0 33 1;
#X connect 32 0 33 2;
#X connect 33 0 122 0;
#X connect 33 1 123 0;
#X connect 34 0 30 0;
#X connect 36 0 39 2;
#X connect 37 0 39 0;
#X connect 38 0 39 1;
#X connect 39 0 124 0;
#X connect 39 1 125 0;
#X connect 40 0 37 0;
#X connect 41 0 44 2;
#X connect 42 0 44 0;
#X connect 43 0 44 1;
#X connect 44 0 127 0;
#X connect 44 1 128 0;
#X connect 45 0 42 0;
#X connect 46 0 49 0;
#X connect 47 0 49 1;
#X connect 48 0 49 2;
#X connect 49 0 130 0;
#X connect 49 1 131 0;
#X connect 50 0 46 0;
#X connect 51 0 52 1;
#X connect 51 0 53 0;
#X connect 52 0 76 0;
#X connect 55 0 3 2;
#X connect 58 0 132 0;
#X connect 60 0 58 0;
#X connect 61 0 58 1;
#X connect 61 0 59 0;
#X connect 63 0 9 2;
#X connect 64 0 79 0;
#X connect 66 0 64 1;
#X connect 66 0 65 0;
#X connect 68 0 64 0;
#X connect 69 0 18 2;
#X connect 70 0 81 0;
#X connect 72 0 26 2;
#X connect 73 0 70 0;
#X connect 74 0 70 1;
#X connect 74 0 71 0;
#X connect 76 0 3 1;
#X connect 76 1 54 0;
#X connect 76 2 77 0;
#X connect 79 0 18 1;
#X connect 79 1 67 0;
#X connect 79 2 80 0;
#X connect 81 0 26 1;
#X connect 81 1 75 0;
#X connect 81 2 82 0;
#X connect 83 0 85 0;
#X connect 85 0 30 1;
#X connect 85 1 88 0;
#X connect 85 2 87 0;
#X connect 86 0 83 1;
#X connect 86 0 84 0;
#X connect 89 0 30 2;
#X connect 90 0 92 0;
#X connect 92 0 37 1;
#X connect 92 1 96 0;
#X connect 92 2 95 0;
#X connect 93 0 90 0;
#X connect 94 0 90 1;
#X connect 94 0 91 0;
#X connect 97 0 37 2;
#X connect 98 0 100 0;
#X connect 100 0 42 1;
#X connect 100 1 104 0;
#X connect 100 2 103 0;
#X connect 101 0 98 1;
#X connect 101 0 99 0;
#X connect 102 0 98 0;
#X connect 105 0 42 2;
#X connect 106 0 108 0;
#X connect 108 0 46 1;
#X connect 108 1 112 0;
#X connect 108 2 111 0;
#X connect 109 0 106 0;
#X connect 110 0 106 1;
#X connect 110 0 107 0;
#X connect 113 0 46 2;
#X connect 114 0 13 0;
#X connect 115 0 13 1;
#X connect 116 0 1 0;
#X connect 117 0 1 1;
#X connect 118 0 20 0;
#X connect 119 0 20 1;
#X connect 120 0 22 0;
#X connect 121 0 22 1;
#X connect 122 0 28 0;
#X connect 123 0 28 1;
#X connect 124 0 35 0;
#X connect 125 0 35 1;
#X connect 127 0 126 0;
#X connect 128 0 126 1;
#X connect 130 0 129 0;
#X connect 131 0 129 1;
#X connect 132 0 9 1;
#X connect 132 1 62 0;
#X connect 132 2 78 0;
#X connect 133 0 141 2;
#X connect 133 1 141 3;
#X connect 134 0 141 0;
#X connect 134 1 141 1;
#X connect 135 0 141 4;
#X connect 135 1 141 5;
#X connect 136 0 141 6;
#X connect 136 1 141 7;
#X connect 137 0 141 8;
#X connect 137 1 141 9;
#X connect 138 0 141 10;
#X connect 138 1 141 11;
#X connect 139 0 141 12;
#X connect 139 1 141 13;
#X connect 140 0 141 14;
#X connect 140 1 141 15;
#X restore 386 74 pd My_RSP_EightPlayAndSelectEngines;
#X f 43;
#X obj 830 465 s indexInit;
#N canvas 182 89 960 583 My_RSP_LedLoadFinishAlert 0;
#X obj 305 394 wiringPi_gpio 24 0 0;
#X msg 262 233 1;
#X msg 301 233 0;
#X obj 176 394 wiringPi_gpio 25 0 0;
#X msg 178 263 1;
#X msg 216 263 0;
#X msg 38 116 0;
#X obj 77 79 t b b;
#X msg 157 133 0;
#X obj 77 230 f;
#X obj 108 231 + 1;
#X obj 77 169 t b b b;
#X floatatom 122 280 5 0 0 0 - - -;
#X obj 77 284 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 77 308 t b b;
#X msg 104 356 0;
#X obj 77 255 select 3;
#X obj 77 39 inlet;
#X text 348 125 9th May 2018 \; This patch toggles all Leds connected
to the pi \; to show that loading the parent patch is done;
#X obj 145 54 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 77 133 metro 800;
#X obj 178 232 delay 400;
#X obj 104 333 delay 600;
#X connect 1 0 3 0;
#X connect 2 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 3 0;
#X connect 6 0 20 0;
#X connect 7 0 20 0;
#X connect 7 1 8 0;
#X connect 8 0 9 1;
#X connect 9 0 10 0;
#X connect 9 0 16 0;
#X connect 10 0 9 1;
#X connect 11 0 9 0;
#X connect 11 1 21 0;
#X connect 11 2 2 0;
#X connect 11 2 1 0;
#X connect 13 0 14 0;
#X connect 14 0 6 0;
#X connect 14 1 22 0;
#X connect 15 0 3 0;
#X connect 15 0 0 0;
#X connect 16 0 13 0;
#X connect 16 1 12 0;
#X connect 17 0 7 0;
#X connect 19 0 7 0;
#X connect 20 0 11 0;
#X connect 21 0 5 0;
#X connect 21 0 4 0;
#X connect 22 0 15 0;
#X restore 788 560 pd My_RSP_LedLoadFinishAlert;
#X obj 844 274 t f b f;
#X obj 26 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407 -1
-1;
#X obj 66 215 bng 40 100 50 0 empty empty empty 17 7 0 10 -191407 -1
-1;
#X obj 793 6 loadbang;
#X obj 816 497 s hidInitBang;
#N canvas 300 76 900 616 My_RSP_NetworkSyncMetro 0;
#X floatatom 31 525 7 0 0 0 tick - -;
#X floatatom 75 416 7 0 0 0 node-id - -;
#X obj 164 372 print node joined;
#X obj 208 351 print node left;
#X obj 119 394 print node list;
#X obj 252 330 print got message;
#X obj 297 309 print got state update;
#X obj 75 489 print node-id;
#X obj 341 288 print init event;
#X obj 75 443 syncjams-id-symbol;
#X symbolatom 75 465 10 0 0 0 id-symbol-> - -;
#X obj 31 105 syncjams \$0/jakki \, bpm 122 \, namespace syncjams \,
port 23232;
#X obj 31 143 route tick node-id node-list joined left message state
init-event sub-tick;
#X floatatom 385 204 10 0 0 0 - - -;
#X obj 385 224 int;
#X obj 469 257 change;
#X text 545 261 neue metrohits hier;
#X text 687 91 3th November 2018 \; This patch uses the syncjams- \;
external to produce our 122 bpm \; metronome. It takes syncjams 'ticks
\; in order so send the first Beat out \; to the parent patch. It also
uses syncjams \; 'sub-ticks' to send 'metroHits' in 16th notes \; accuracy
to our 'SelectAndPlay-Engines' \; where they are uses for loop-timing.
\; ...just as in the 'My_RSP_Metronome'-Subatch.;
#X obj 31 550 % 4;
#X floatatom 31 577 5 0 0 0 - - -;
#X obj 125 654 wiringPi_gpio 25 0 0;
#X floatatom 75 622 5 0 0 0 - - -;
#X obj 31 664 moses 1;
#X obj 31 601 == 0;
#X obj 70 690 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 70 713 outlet firstBeat;
#X text 172 543 Modulo gives us either 0 \, 1 \, 2 \, 3 regardless
how high the tick's count is. With this \, we can synchronize the metros
of our two raspberry pis \, so that they flash the LED for the first
beat together!;
#X text 450 151 subticks come fast (24) \; here we take it down \;
to 16th accuracy (/6) for our \; loop-timing in the RSP_Select_And_Play_Engine-Subpatches
;
#X obj 74 577 s metro4_4;
#X obj 31 47 r currentBPM;
#X msg 31 78 set-state /BPM \$1;
#X obj 469 281 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 469 304 s metroHits;
#X obj 385 184 / 6;
#X connect 0 0 18 0;
#X connect 1 0 9 0;
#X connect 9 0 10 0;
#X connect 10 0 7 0;
#X connect 11 0 12 0;
#X connect 12 0 0 0;
#X connect 12 1 1 0;
#X connect 12 2 4 0;
#X connect 12 3 2 0;
#X connect 12 4 3 0;
#X connect 12 5 5 0;
#X connect 12 6 6 0;
#X connect 12 7 8 0;
#X connect 12 8 33 0;
#X connect 13 0 14 0;
#X connect 14 0 15 0;
#X connect 15 0 31 0;
#X connect 18 0 19 0;
#X connect 18 0 28 0;
#X connect 19 0 23 0;
#X connect 21 0 20 0;
#X connect 22 1 24 0;
#X connect 23 0 22 0;
#X connect 23 0 21 0;
#X connect 24 0 25 0;
#X connect 29 0 30 0;
#X connect 30 0 11 0;
#X connect 31 0 32 0;
#X connect 33 0 13 0;
#X restore 268 17 pd My_RSP_NetworkSyncMetro;
#X obj 268 46 s metroFirstHit;
#X obj 645 130 cnv 15 100 60 empty cbpm BPM122 20 28 0 20 -4032 -66577
0;
#N canvas 162 289 793 385 My_RSP_BPM_SETTER 0;
#X obj 17 102 t b b;
#X obj 17 142 f;
#X obj 17 164 + 1;
#X floatatom 90 325 5 0 0 0 - - -;
#X obj 179 154 f;
#X obj 179 102 t b b;
#X obj 179 174 - 1;
#X obj 17 187 t b f;
#X obj 179 193 t b f;
#X msg 90 381 \; cbpm label \$1;
#X obj 90 350 makefilename BPM%d;
#X text 429 42 26th November 2018 \; This patch has two inlets \; When
the first inlet receives \; a bang \, it increases the current bpm
\; by 1 The second inlet decreases the \; current bpm analogically.
The current \; bpm is shown on the blue BPM-Canvas on \; the parent
patch. The default bpm is 122 bpm.;
#X obj 17 23 inlet increaseBpmBang;
#X obj 179 23 inlet decreaseBpmBang;
#X obj 90 226 f 122;
#X obj 427 352 s currentBPM;
#X obj 239 352 print Setting current BPM to;
#X obj 90 250 t f f f f;
#X obj 536 350 / 122;
#X obj 536 414 s PhasorFrequencyTimingFactor;
#X floatatom 610 393 5 0 0 0 - - -;
#X connect 0 0 1 0;
#X connect 0 1 14 0;
#X connect 1 0 2 0;
#X connect 2 0 7 0;
#X connect 3 0 10 0;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X connect 5 1 14 0;
#X connect 6 0 8 0;
#X connect 6 0 14 1;
#X connect 7 0 14 0;
#X connect 7 1 14 1;
#X connect 8 0 14 0;
#X connect 8 1 14 1;
#X connect 10 0 9 0;
#X connect 12 0 0 0;
#X connect 13 0 5 0;
#X connect 14 0 4 1;
#X connect 14 0 1 1;
#X connect 14 0 17 0;
#X connect 17 0 3 0;
#X connect 17 1 16 0;
#X connect 17 2 15 0;
#X connect 17 3 18 0;
#X connect 18 0 19 0;
#X connect 18 0 20 0;
#X coords 0 385 1 384 100 84 0;
#X restore 565 -15 pd My_RSP_BPM_SETTER;
#X obj 558 135 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 601 152 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 22 638 cnv 15 81 20 empty SP1CurrentlySelected INTLD_eule1 2
12 0 10 -233017 -66577 0;
#X obj 23 686 cnv 15 81 20 empty SP1CurrentlyPlaying INTLD_eule1 0
12 0 10 -233017 -66577 0;
#X text 20 668 playing;
#X text 20 620 selected;
#X obj 114 638 cnv 15 81 20 empty SP2CurrentlySelected INTLD_eule1
2 12 0 10 -233017 -66577 0;
#X obj 115 688 cnv 15 81 20 empty SP2CurrentlyPlaying INTLD_eule1 0
12 0 10 -233017 -66577 0;
#X text 112 670 playing;
#X text 110 620 selected;
#X obj 204 638 cnv 20 81 20 empty SP3CurrentlySelected INTLD_eule1
0 12 0 10 -233017 -66577 0;
#X obj 205 688 cnv 15 81 20 empty SP3CurrentlyPlaying valliflaeche
0 12 0 10 -233017 -66577 0;
#X text 202 670 playing;
#X text 200 620 selected;
#X obj 294 636 cnv 15 81 20 empty SP4CurrentlySelected JERTAW_bass
2 12 0 10 -233017 -66577 0;
#X obj 295 686 cnv 15 81 20 empty SP4CurrentlyPlaying JERTAW_bass 0
12 0 10 -233017 -66577 0;
#X text 292 668 playing;
#X text 290 618 selected;
#X obj 390 636 cnv 20 81 20 empty SP5CurrentlySelected JERTAW_bass
0 12 0 10 -233017 -66577 0;
#X obj 391 686 cnv 15 81 20 empty SP5CurrentlyPlaying JERTAW_bass 0
12 0 10 -233017 -66577 0;
#X text 388 668 playing;
#X text 386 618 selected;
#X obj 480 636 cnv 20 81 20 empty SP6CurrentlySelected INTLD_eule1
0 12 0 10 -233017 -66577 0;
#X obj 481 686 cnv 15 81 20 empty SP6CurrentlyPlaying INTLD_eule1 0
12 0 10 -233017 -66577 0;
#X text 478 668 playing;
#X text 476 618 selected;
#X obj 570 636 cnv 15 81 20 empty SP7CurrentlySelected JERTAW_bass
2 12 0 10 -233017 -66577 0;
#X obj 571 686 cnv 15 81 20 empty SP7CurrentlyPlaying atmosubbass 0
12 0 10 -233017 -66577 0;
#X text 568 668 playing;
#X text 566 618 selected;
#X obj 662 636 cnv 15 100 60 empty SP8CurrentlySelected JERTAW_bass
20 12 0 14 -233017 -66577 0;
#X obj 663 686 cnv 15 81 20 empty SP8CurrentlyPlaying atmosubbass 0
12 0 10 -233017 -66577 0;
#X text 660 668 playing;
#X text 658 618 selected;
#X msg 872 104 symbol /home/pi/Documents/SamplePacks/;
#X obj 775 36 t b b b b b b b b b;
#X obj 802 529 s excelParseInitBang;
#X connect 0 0 107 0;
#X connect 0 0 107 1;
#X connect 0 0 107 2;
#X connect 0 0 107 3;
#X connect 0 0 107 4;
#X connect 0 0 107 5;
#X connect 0 0 107 6;
#X connect 0 0 107 7;
#X connect 1 0 0 0;
#X connect 2 0 111 0;
#X connect 2 1 112 0;
#X connect 2 2 3 0;
#X connect 2 3 4 0;
#X connect 2 4 5 0;
#X connect 2 5 6 0;
#X connect 2 6 7 0;
#X connect 2 7 8 0;
#X connect 2 8 9 0;
#X connect 2 9 10 0;
#X connect 2 10 11 0;
#X connect 2 11 12 0;
#X connect 2 12 13 0;
#X connect 2 13 14 0;
#X connect 2 14 15 0;
#X connect 2 15 16 0;
#X connect 3 0 53 0;
#X connect 4 0 54 0;
#X connect 5 0 78 0;
#X connect 6 0 79 0;
#X connect 7 0 80 0;
#X connect 8 0 81 0;
#X connect 9 0 85 0;
#X connect 10 0 86 0;
#X connect 11 0 87 0;
#X connect 12 0 88 0;
#X connect 13 0 93 0;
#X connect 14 0 94 0;
#X connect 15 0 96 0;
#X connect 16 0 97 0;
#X connect 17 0 106 0;
#X connect 18 0 105 0;
#X connect 19 0 104 0;
#X connect 20 0 103 0;
#X connect 21 0 102 0;
#X connect 22 0 101 0;
#X connect 23 0 100 0;
#X connect 24 0 99 0;
#X connect 25 0 84 0;
#X connect 26 0 27 0;
#X connect 28 0 26 0;
#X connect 29 0 30 0;
#X connect 31 0 29 0;
#X connect 32 0 34 0;
#X connect 33 0 32 0;
#X connect 35 0 37 0;
#X connect 36 0 35 0;
#X connect 38 0 43 0;
#X connect 39 0 45 0;
#X connect 40 0 47 0;
#X connect 41 0 49 0;
#X connect 42 0 38 0;
#X connect 44 0 39 0;
#X connect 46 0 40 0;
#X connect 48 0 41 0;
#X connect 56 0 154 0;
#X connect 57 0 58 0;
#X connect 58 0 59 0;
#X connect 59 0 61 0;
#X connect 59 0 110 0;
#X connect 60 0 59 1;
#X connect 61 0 59 1;
#X connect 63 0 65 0;
#X connect 90 0 91 0;
#X connect 92 0 90 0;
#X connect 99 0 98 0;
#X connect 100 0 95 0;
#X connect 101 0 89 0;
#X connect 102 0 83 0;
#X connect 103 0 82 0;
#X connect 104 0 77 0;
#X connect 105 0 55 0;
#X connect 106 0 50 0;
#X connect 110 0 70 0;
#X connect 110 1 63 0;
#X connect 110 2 62 0;
#X connect 111 0 51 0;
#X connect 112 0 52 0;
#X connect 113 0 154 0;
#X connect 115 0 116 0;
#X connect 119 0 118 0;
#X connect 120 0 118 1;
#X connect 153 0 67 0;
#X connect 154 0 66 0;
#X connect 154 1 109 0;
#X connect 154 2 155 0;
#X connect 154 3 114 0;
#X connect 154 4 108 0;
#X connect 154 5 57 0;
#X connect 154 6 60 0;
#X connect 154 7 153 0;
#X connect 154 8 71 0;
